//
// GUI
//

//build user interface
//
global proc openPipelineUI()
{

	//global string $openPipeline_menuCurrentAsset="";
	//global string $openPipeline_menuCurrentAssetType="";
	//global string $openPipeline_menuCurrentAssetComponent="";
	//global string $openPipeline_currentOpenAsset="";
	//global string $openPipeline_currentOpenAssetComponent="";
	//global string $openPipeline_currentOpenAssetComponentString="";
	string $anno_projectList="Select from the available Projects.";
	string $anno_projectManager="Open the Project Manager, where you can add or remove Projects.";
	string $anno_saveWorkshop="Save a workshop file for the current Asset/Component.";
	string $anno_master="Save a master file for the current Asset/Component.";
	string $anno_revive="Revive an old version of the current Asset/Component.";
	string $anno_assetTypeList="Choose from the available Asset Types. You can select more than one.";
	string $anno_newAssetType="Create a new Asset Type";
	string $anno_removeAssetType="Remove the selected Asset Type(s) from the inverntory.";
	string $anno_assetList="Choose from the available Assets. Hold down left mouse button for options.";
	string $anno_newAsset="Create a new Asset for the selected Asset Type.";
	string $anno_removeAsset="Remove the selected Asset from the inventory.";
	string $anno_componentList="Choose from the available Components. Hold down left mouse button for options.";
	string $anno_newComponent="Create a new Component for the selected Asset.";
	string $anno_removeComponent="Remove the selected Component from the inventory.";
	string $anno_close="Close openPipeline.";
	
	string $anno_editAsset="Open the Asset for editing.";
	string $anno_viewAsset="Open the master file for the Asset.";
	string $anno_importAssetWorkshop="Import the Asset's latest workshop file into the current scene.";
	string $anno_importAssetMaster="Import the Asset's master file into the current scene.";
	string $anno_referenceAssetWorkshop="Reference the Asset's latest workshop file into the current scene.";
	string $anno_referenceAssetMaster="Reference the Asset's master file into the current scene.";
	
	string $anno_editComponent="Open the Component for editing.";
	string $anno_viewComponent="Open the master file for the Component.";
	string $anno_importComponentWorkshop="Import the Component's latest workshop file into the current scene.";
	string $anno_importComponentMaster="Import the Component's master file into the current scene.";
	string $anno_referenceComponentWorkshop="Reference the Component's latest workshop file into the current scene.";
	string $anno_referenceComponentMaster="Reference the Component's master file into the current scene.";

	global string $openPipeline_name;
	global string $openPipeline_version;
		
	global string $openPipeline_userName;
	global int $openPipeline_currentProjIndex;
	global int $openPipeline_winPos[];

	string $projList[] = openPipelineGetProjectList();
	//nt $numProjects = size($projList)/2;
	if (size($projList))
	{
		string $windowExists = `window -q -exists openPipelineUI`;
		if ($windowExists == 1)
		{
			openPipelineRefreshUIPos;
			deleteUI openPipelineUI;
		}

	//setProject to selected proj dir
	
	//window setup
	string $window = `window -w 410 -h 650 -mxb 0 -rtf 0 -menuBar true 
		-title ($openPipeline_name + " " + $openPipeline_version) openPipelineUI`;

	// menu (more can go here)

 	menu -label "Maya Tools" -parent $window;
 		menuItem -label "Maya Reference Editor" -command "ReferenceEditor";
 		menuItem -label "Maya Project Manager" -command "projectSetup 2";

 	menu -label "Help" -helpMenu true -parent $window;
 		menuItem -label "About openPipeline..." -command openPipelineAboutDialog;
 		menuItem -label "Help..." -command openPipelineHelpLaunch;


	//starting formlayout
	string $form = `formLayout`;	

	//--------------------------------------------
	//columnLayout for basic info on the top of UI
	//including Login User, Proj Name, Proj Path
	//
	columnLayout infoUI;
			
	textFieldGrp -label "Login User : " -text $openPipeline_userName -editable false userName;
	rowColumnLayout -numberOfColumns 2 -cw 1 280 -cw 2 100;
	optionMenuGrp -label "Project Name : " -cl2 "right" "left" -columnWidth2 140 200  
		-cc "openPipelineProjSelected" -ann $anno_projectList projNameMenu;
	//
	//call proc openPipelineGetProjList to get the existed proj size and name one by one
	//proc located in openPipelineUtility.mel
	string $projList[] = openPipelineGetProjectList();
	int $numProjects = size($projList)/2;
	for($i=0; $i<$numProjects; $i++)
	{
		string $temp_projName = $projList[$i*2];
		menuItem -label $temp_projName;
	}
			
	//set the path name according to the selected proj name
	
	//optionMenuGrp -edit -sl ($openPipeline_currentProjIndex+1) projNameMenu;	
	
	
	button -label "Project Manager..." -c "openPipelineProjectUI" -ann $anno_projectManager projManagerButton;
	setParent..;
	textFieldGrp -label "Project Path : " -editable false projPath;

	//textFieldGrp -label "CURRENT OPEN FILE :" -text $openPipeline_currentOpenAssetComponentString -editable false currentFileText;//*************not needed

	setParent ..;
	setParent..;


	//
	//end of columnLayout infoUI
	//--------------------------
				 		
	//tab layout for switching btw project and Scenes Inventory
	string $tabs = `tabLayout -scr 0 -innerMarginWidth 0 -innerMarginHeight 0`;

	//-------------------------
	//main column : Project Tab
	//this is the first column that will be attached to the tab layout
	//
	columnLayout mainColumnLayout;
		
				//------------------------------
				//UI of Project Inventory starts
				//
				separator -style "none" -w 410 -h 10;
				separator -style "double" -w 410;
			  
				columnLayout;
					rowLayout -numberOfColumns 2 -cw2 345 55 -cal 1 "left" -cal 2 "right";
						text -fn "boldLabelFont" -w 345 -label "CURRENTLY OPEN ASSET / COMPONENT:"  -al "left" op_currOpenTitle;
						text -fn "boldLabelFont" -w 55 -label ""  -al "right" op_currOpenHeadingVersion;
						setParent..;
					text -fn "boldLabelFont" -w 345 -label ""  -al "left" op_currOpenHeading;
					setParent..;
				separator -style "double" -w 410;
				separator -style "none" -w 410 -h 5;
				rowLayout -numberOfColumns 2 -cw2 180 230;
					columnLayout -rs 5;
						rowLayout -numberOfColumns 2 -cw2 70 160;
							text -fn "boldLabelFont" -label "Actions" -w 70 -al "left";
							text -fn "boldLabelFont" -label "" -w 160 -al "left" op_currOpenLabel;
							setParent..;
						rowLayout -numberOfColumns 2 -cw2 100 65;
							button -l "Save Workshop..." -bgc .8 .6 .5 -c "openPipelineSaveWorkshopGUI" -ann $anno_saveWorkshop op_saveWorkshopButton;
							button -l "MASTER..." -bgc .9 .7 .4 -c "openPipelineSaveMasterFileGUI" -ann $anno_master op_masterButton;
							
							setParent..;
						
							//rowLayout -numberOfColumns 2 -cw2 165 60;
							//	textField -w 165;
								button -l "Revive Workshop..."  -bgc .5 .7 .7 -w 164 -c "openPipelineReviveGUI" -ann $anno_revive op_reviveButton;
								
							//	setParent..;
							setParent..;
						columnLayout -rs 5;
							text -fn "boldLabelFont" -label "Comments" -w 180 -al "left";
							scrollField -w 220 -h 50 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "Nothing here!" noteField;
							setParent..;
					setParent ..;

				separator -style "none" -w 410 -h 10;
				separator -style "double" -w 410;
				text -fn "boldLabelFont" -label "INVENTORY BROWSER" -w 410 -al "left";
				separator -style "double" -w 410;
				separator -style "none" -w 410 -h 5;
				rowLayout -numberOfColumns 3 -w 410 -cw3 135 135 135 -cl3 "right" "right" "right";
					columnLayout -w 120 -rs 0 -cal "center";
						text -l "Asset Types" -w 125 -fn "boldLabelFont" -al "left";
						textScrollList -w 125 -h 120 -ams 1 -sc "openPipelineAssetTypeSelected" -fn "smallPlainLabelFont" -ann $anno_assetTypeList op_assetTypeScrollList;
							separator -style "none" -w 125 -h 5;
								rowLayout -numberOfColumns 2 -cw2 65 60;			
						button -l "New..." -bgc .6 .8 .5 -w 65 -c "openPipelineNewAssetTypeUI" -ann $anno_newAssetType op_assetTypeNewButton; 
						button -l "Remove" -bgc .8 .3 .3 -w 60 -c "openPipelineRemoveFolder type" -ann $anno_removeAssetType op_assetTypeRemoveButton;
								setParent..;	
						setParent ..;
				
					columnLayout -w 120 -rs 0 -cal "center";
						text -fn "boldLabelFont" -l "Assets" -w 125 -al "left";
						menuBarLayout -bgc .9 .3 .3 -w 125;
							menu -label "OPTIONS..." op_assetMenu;
								menuItem -label "Edit Asset" -subMenu 0 -command "openPipelineAssetAction workshop 0 open 0" -ann $anno_editAsset op_assetMenuEdit;
								menuItem -label "View Master" -subMenu 0 -command "openPipelineAssetAction master 0 open 0" -ann $anno_viewAsset op_assetMenuView;
								
								//	setParent -menu ..;
								menuItem -label "Import" -subMenu 1 -ann " " op_assetMenuImport;
								menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 import 0" -ann $anno_importAssetWorkshop op_assetMenuImportWorkshop;
								menuItem -label "Master" -command "openPipelineAssetAction master 0 import 0" -ann $anno_importAssetMaster op_assetMenuImportMaster;
									setParent -menu ..;
								menuItem -label "Reference" -subMenu 1 -ann " " op_assetMenuReference;
								menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 reference 0" -ann $anno_referenceAssetWorkshop op_assetMenuReferenceWorkshop;
								menuItem -label "Master" -command "openPipelineAssetAction master 0 reference 0" -ann $anno_referenceAssetMaster op_assetMenuReferenceMaster;
									setParent -menu ..;
								columnLayout;
									textScrollList -w 125 -h 101 -sc "openPipelineAssetSelected" -fn "smallPlainLabelFont" -ann $anno_assetList op_assetScrollList;
									popupMenu -p op_assetScrollList -b 1 -mm 1 -pmc "openPipelineAssetSelected";
										
											menuItem -label "Edit Asset" -command "openPipelineAssetAction workshop 0 open 0" -ann $anno_editAsset op_assetMenuEdit2;
											menuItem -label "View Master" -command "openPipelineAssetAction master 0 open 0" -ann $anno_viewAsset op_assetMenuView2;
											//setParent -menu ..;
										menuItem -label "Import" -subMenu 1 -ann " " op_assetMenuImport2;
											menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 import 0" -ann $anno_importAssetWorkshop op_assetMenuImportWorkshop2;
											menuItem -label "Master" -command "openPipelineAssetAction master 0 import 0" -ann $anno_importAssetMaster op_assetMenuImportMaster2;
											setParent -menu ..;
										menuItem -label "Reference" -subMenu 1 -ann " " op_assetMenuReference2;
										menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 reference 0" -ann $anno_referenceAssetWorkshop op_assetMenuReferenceWorkshop2;
										menuItem -label "Master" -command "openPipelineAssetAction master reference 0" -ann $anno_referenceAssetMaster op_assetMenuReferenceMaster2;	
										setParent -menu ..;
									separator -style "none" -w 125 -h 5;
									rowLayout -numberOfColumns 2 -cw2 65 60;			
										button -l "New..." -bgc .6 .8 .5 -w 65 -c "openPipelineNewAssetUI" -ann $anno_newAsset op_assetNewButton; 
										button -l "Remove" -bgc .8 .3 .3 -w 60 -c "openPipelineRemoveFolder asset" -ann $anno_removeAsset op_assetRemoveButton;
										setParent..;	
									setParent ..;
								setParent..;
							setParent..;
						columnLayout;
						text -fn "boldLabelFont" -l "Components" -w 125 -al "left";
						menuBarLayout -bgc .9 .3 .3 -w 125;
							menu -label "OPTIONS..." op_componentMenu;
								menuItem -label "Edit Component" -subMenu 0 -command "openPipelineComponentAction workshop 0 open 0" -ann $anno_editComponent op_compMenuEdit;
								menuItem -label "View Master" -command "openPipelineComponentAction master 0 open 0" -ann $anno_viewComponent op_compMenuView;
								//setParent -menu ..;
							menuItem -label "Import" -subMenu 1 -ann " " op_compMenuImport;
								menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 import 0" -ann $anno_importComponentWorkshop op_compMenuImportWorkshop;
								menuItem -label "Master" -command "openPipelineComponentAction master 0 import 0" -ann $anno_importComponentMaster op_compMenuImportMaster;
								setParent -menu ..;
							menuItem -label "Reference" -subMenu 1 -ann " " op_compMenuReference;
							menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 reference 0" -ann $anno_referenceComponentWorkshop op_compMenuReferenceWorkshop;
							menuItem -label "Master" -command "openPipelineComponentAction master 0 reference 0" -ann $anno_referenceComponentMaster op_compMenuReferenceMaster;
							setParent -menu ..;
							
						columnLayout;
							textScrollList -w 125 -h 101 -en 0 -sc "openPipelineComponentSelected" -fn "smallPlainLabelFont" -ann $anno_componentList op_componentScrollList;
							popupMenu -p op_componentScrollList -b 1 -mm 1 -pmc "openPipelineComponentSelected";
										menuItem -label "Edit Component" -subMenu 0 -command "openPipelineComponentAction workshop 0 open 0" -ann $anno_editComponent op_compMenuEdit2;
											menuItem -label "View Master" -command "openPipelineComponentAction master 0 open 0" -ann $anno_viewComponent op_compMenuView2;
								
										//	setParent -menu ..;
										menuItem -label "Import" -subMenu 1 -ann " " op_compMenuImport2;
											menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 import 0" -ann $anno_importComponentWorkshop op_compMenuImportWorkshop2;
											menuItem -label "Master" -command "openPipelineComponentAction master 0 import 0" -ann $anno_importComponentMaster op_compMenuImportMaster2;
											setParent -menu ..;
										menuItem -label "Reference" -subMenu 1 -ann " " op_compMenuReference2;
										menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 reference 0" -ann $anno_referenceComponentWorkshop op_compMenuReferenceWorkshop2; 
										menuItem -label "Master" -command "openPipelineComponentAction master 0 reference 0" -ann $anno_referenceComponentMaster op_compMenuReferenceMaster2;	
										setParent -menu ..;
							separator -style "none" -w 125 -h 5;
							rowLayout -numberOfColumns 2 -cw2 65 60;			
							button -l "New..." -bgc .6 .8 .5 -w 65 -c "openPipelineNewAssetComponentUI" -ann $anno_newComponent op_componentNewButton; 
							button -l "Remove" -bgc .8 .3 .3 -w 60 -c "openPipelineRemoveFolder component" -ann $anno_removeComponent op_componentRemoveButton;	
							setParent..;	
						setParent ..;
					setParent..;
				setParent..;
			setParent ..;
			//end of framlayout:Asset Notes
			separator -style "none" -w 125 -h 10;
			rowLayout -numberOfColumns 2 -w 395 -cw2 135 260 -cl2 "center" "center" ;
				columnLayout;
					text -fn "boldLabelFont" -l "Info" -w 130 -al "center";
					scrollField -w 130 -h 75 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_infoField;
					setParent ..;
				columnLayout;
					text -fn "boldLabelFont" -l "Comments" -w 260 -al "center";
					scrollField -w 260 -h 75 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_commentField;
					setParent ..;
					
				setParent..;
			separator -style "none" -w 125 -h 10;
			frameLayout -labelVisible false -w 395;
				helpLine -w 395;
				setParent..;
		setParent ..;		
		//UI of Pipeline Tools ends
		//-------------------------	
		//
		//end of main column: Project Tab
		//--------------------------------

	
			//------------------------
			//sec column : Scenes Tab
			//this is the second column that will be attached to the tab layout
			//
			columnLayout secColumnLayout;
			
				//----------------------
				//Scene Inventory starts
				//
				separator -style "double" -w 410;
				text -label "SCENE INVENTORY";
				separator -style "double" -w 410;
	
				
				columnLayout;	
					columnLayout;
								text -w 410 -l "[current scene]";
								setParent..;
								
								columnLayout;
								scrollField -ww true -ed false -w 410 -h 20 -text "N/A";
								setParent..;
								
								columnLayout;
								separator -w 410;
								setParent..;
								
					setParent..;					
		
				
				//proc openPipelineGetProjList
				//located in openPipelineUtility.mel
				//frameLayout -label "Reference Creator" -collapsable 1 -collapse 0 -w 410 -ec "openPipelineGrabFileList availableRefMenu availableAssetList;";
					
					//problem starts here
					columnLayout;//c
											
						rowLayout -numberOfColumns 2 -w 410 -h 440 -cw2 160 250;//rA		
							columnLayout -columnAttach "left" 5 -cw 160 -h 440;//cA	
														
								columnLayout -h 20;//cAa
								
								text -l "Scenes:";
								setParent..;//cAa
								
								
								columnLayout;//cAb
									scrollLayout -w 155 -hst 0 -vst 0 allSceneScroll;//cAba
										columnLayout -cw 155 -h 200;//cAbaa				
											openPipelineSeqFileTreeUI;									
										setParent..;//cAbaa	 
									scrollLayout -e -rc "openPipelineAdjustScrollLayout allSceneScroll 200;" -h 200 allSceneScroll;										
									setParent..;//cAba								
								setParent..;//cAb
								
								
								columnLayout;//cAc
								text -l "Asset:";
								setParent..;//cAc
								
								
								columnLayout;//cAd
								scrollLayout -backgroundColor 1 1 1 -w 155 -hst 0 -vst 0 allAssetScroll;//cAda
									columnLayout -cw 155 -h 200;//cAdaa
										string $validAsset[] = `openPipelineExistedAsset validList`;
										string $invalidAsset[] = `openPipelineExistedAsset invalidList`;
										for($i =0;$i<`size $validAsset`; $i++)
										{
												string $font = "plainLabelFont";
											
												iconTextButton 
												-w 155 -h 20 -style "textOnly"  							
												-l $validAsset[$i]
												-font $font
												-c ("openPipelineCreateReference asset "+$validAsset[$i])
												-bgc 1 1 1 												
												($validAsset[$i]+"_"+$i+"_"+"SelButton");									
												
											
										}
											
										for($i =0;$i<`size $invalidAsset`; $i++)
										{
											string $font ="obliqueLabelFont";
											
												iconTextButton 
												-w 155 -h 20 -style "textOnly"  							
												-l $invalidAsset[$i]
												-font $font
												-en false
												-bgc 1 1 1											
												($invalidAsset[$i]+"_"+$i+"_"+"SelButton");		
											
											
										}		
										setParent..;//cAdaa
														
										scrollLayout -e -rc "openPipelineAdjustScrollLayout allAssetScroll 200;" -h 200 allAssetScroll;							
												 
									setParent..;//cAda
							setParent..;//cAd
							
							setParent..;//cA
							//problem ends here	
							columnLayout -columnAttach "both" 5 -cw 250;//cB
								
								columnLayout;//cBa
								text -l "Ref:";
								setParent..;//cBa
																
								columnLayout col_RefInv;//cBb
								openPipelineRefInvUI;//cBb

								setParent..;
									
								columnLayout;//cBc
									separator -w 200;
								setParent..;//cBc
								
							 	
								columnLayout;//cBd
									
									columnLayout;//cBda
										separator -style "double" -w 205;
										text -label "PIPELINE TOOL";
										separator -style "double" -w 205;
									setParent..;//cBda
										
									columnLayout -w 205 -adjustableColumn 1 workflowColumnForSceneInv;//cBdb
										button -label "Save Workshop" -width 200 -h 30 -command "";
										button -label "MASTER FILE" -width 200 -h 30 -command "";
											
										separator -style "double" -w 200 -h 30;		
					
										optionMenu 
											-label "Revive:" ;
												
								 			menuItem -label "workshop";
								 			menuItem -label "master";
					
										optionMenu -label "Version:" -w 200 reviveVerMenu_SceneInv;	
										button -label "Revive" -width 200 -command "";										
									setParent ..;//cBdb						
								
								setParent..;//cBd
										
										
							setParent..;//cB
							
							setParent..;//rA	
							setParent..;//c	
								
					
					
				frameLayout -label "New Seq/Shots" -collapsable 1 -collapse 0 -w 410 -ec "";
					columnLayout -w 400 -adjustableColumn 1;
					rowLayout -numberOfColumns 3 -cw3 125 200 75 -cl3 "left" "center" "right";
						text -label "Sequence Name:" -width 125;
						string $nameField = `textField -width 200 sequenceNameField`;	
						button -label "New Seq" -width 75 -command "openPipelineNewSceneProcess sequence sequenceNameField";
					setParent ..;

					rowLayout -numberOfColumns 3 -cw3 125 200 75 -cl3 "left" "center" "right";
						text -label "Shot Name:" -width 125;
						string $nameField = `textField -width 200 shotNameField`;	
						button -label "New Shot" -width 75 -command "openPipelineNewSceneProcess shot shotNameField";
					setParent ..;
		
					rowLayout -numberOfColumns 4 -cw4 125 150 25 100 -cl4 "center" "center" "right" "center";
						optionMenuGrp -label "Shot Type:" -cw2 125 150 -columnAlign2 "left" "left" assetComponentTypeMenu;
							menuItem -label "anim";
							menuItem -label "light";
							menuItem -label "effects";						
							menuItem -label "other...";
						setParent ..;
						button 
							-label "New Shot Type" -width 100 -h 20 
							-command "openPipelineNewSceneProcess shottype assetComponentTypeMenu";					
					setParent ..;
				setParent ..;
				setParent ..;
				
				setParent..;	
				setParent..;
				

				//setParent ..;	
				//end of Reference Editor frame 
					
				//
				//end of Scene Inventory
				//----------------------
				
			setParent ..;
			//
			//end of Sec Column 
			//----------------------	
		
			setParent..;
			//
			//end of Tab Layout
			//----------------------
	  			
			//columnLayout : Reresh UI
			columnLayout -cal "center" -cw 410 -cat "left" 2 refreshUIColumn;
				separator -style "double" -w 410;
				separator -style "none" -w 410;
				rowLayout -numberOfColumns 2 -cw2 205 205 -cl2 "center" "center";
					button -label "Refresh UI" -width 205 -command "openPipelineUI;";
					button -label "Close" -width 205 -command "deleteUI openPipelineUI" -ann $anno_close;
				setParent..;
			setParent ..;
			//
			//end of Refresh UI
			//-----------------

		//------------------------------------------
		//tabLayout editing, giving tabs diff names
		//
		tabLayout -edit
		  			-tabLabel mainColumnLayout "Asset Management" -tabLabel secColumnLayout "Scene Management" $tabs;
		//
		//end of tabLayou editing
		//-----------------------
	
		//
		//formLayout editing
		//
		formLayout -edit
				-attachForm    	infoUI     "top"   5
		 		-attachForm     infoUI     "left"   1
		 		-attachNone	  	infoUI     "bottom" 
		 		-attachPosition infoUI     "right"  0 100
				
		 		-attachForm     $tabs     "left"   1
		 		-attachControl 	$tabs     "top" 	 5 infoUI
		 		-attachControl  $tabs     "bottom" 5 refreshUIColumn
		 		-attachPosition $tabs     "right"  0 100
		 	
		 		-attachNone     refreshUIColumn     "top"
		 		-attachForm     refreshUIColumn     "left"   1
		 		-attachForm     refreshUIColumn     "bottom" 5
		 		-attachForm     refreshUIColumn     "right"  5
		 $form;
		//
		//end of formLayout editing
		//


	// display final window, window position is depending on Global Var $openPipeline_winPos[]
	
	window -e -w 430 -h 670 -tlc $openPipeline_winPos[0] $openPipeline_winPos[1] openPipelineUI;
	openPipelineProjSelected();
	openPipelineUpdateCurrentlyOpen();
	
	showWindow $window;
	
	}else{
		if (`window -q -exists openPipelineUI`)
		{
			openPipelineRefreshUIPos;
			deleteUI openPipelineUI;
		}
		confirmDialog -title "New Directory Created" -bgc .9 .9 .9 -message "No Projects exist. Please add a Project using the Project Manager."
			-button "Ok" -defaultButton "Ok";	
		$openPipeline_currentProjIndex=-1;
		openPipelineProjectUI();
	}
}
global proc openPipelineSceneEdit()
{
	
}
global proc openPipelineUpdateCurrentlyOpen()
{
	
	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currType = `optionVar -q "op_currOpenType"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	int $currVersion = `optionVar -q "op_currOpenVersion"`;
	
	string $workshop = ($currPath + "workshop/");
	string $workshopFiles[] = `getFileList -folder $workshop -filespec ("*_workshop_*.mb")`;
	int $numVersions = `size($workshopFiles)`;
	
	if ($currPath=="")
	{
		button -e -en 0 op_saveWorkshopButton;
		button -e -en 0 op_masterButton;
		button -e -en 0 op_reviveButton;
		text -e -label "no file open" op_currOpenHeading;
		text -e -vis 0 op_currOpenHeadingVersion;
		text -e -label "" -fn "obliqueLabelFont" op_currOpenLabel;
	}
	else
	{
		button -e -en 1 op_saveWorkshopButton;
		button -e -en 1 op_masterButton;
	
		string $displayString="";
		string $versionString="";
		if ($currCat=="asset")
		{
			string $assetName = openPipelineGetFolderFromPath($currPath,0);
			string $assetType = openPipelineGetFolderFromPath($currPath,1);
			$displayString+=($assetType+": "+$assetName+"  ("+$currType+")");
		
		}
		else if ($currCat=="component")
		{
			string $assetName = openPipelineGetFolderFromPath($currPath,2);
			string $assetType = openPipelineGetFolderFromPath($currPath,3);
			string $compName = openPipelineGetFolderFromPath($currPath,0);
			$displayString+=($assetType+": "+ $assetName+": "+$compName+"  ("+$currType+")");
		}
		if ($currType=="workshop")
		{
			$versionString+=("version:"+$currVersion);
			if ($currVersion>9)
			{
				if ($currVersion<99)
					$versionString+=" ";
			}
			else
				$versionString+="  ";
			if ($numVersions>1)
				button -e -en 1 op_reviveButton;
			else
				button -e -en 0 op_reviveButton;
			//print ($numVersions+" is how many versions we see\n");
			//print ($currVersion+" is what the current is\n");
			if ($numVersions==$currVersion)
			{
				//print("newest school!\n");
				text -e -bgc 1 1 1 op_currOpenHeadingVersion;
				text -e -vis 1 -l $versionString op_currOpenHeadingVersion;
			}
			else
			{
				//print("old school!\n");
				text -e -bgc .5 .7 .7 op_currOpenHeadingVersion;
				text -e -vis 1 -l $versionString op_currOpenHeadingVersion;
			}
		}
		else
			text -e -vis 0 op_currOpenHeadingVersion;
		text -e -label $displayString -fn "boldLabelFont" op_currOpenHeading;
		
	}
		openPipelineRemoveSecondaryWindows();
}

global proc int openPipelineAssetHasWorkshop(string $path)
{
	string $name = openPipelineGetFolderFromPath($path,0);
	string $expectedWorkshopFile = ($path + "/workshop/"+$name+"_workshop_1.mb");
	int $exists = `filetest -f $expectedWorkshopFile`;
	return $exists;
}

global proc int openPipelineAssetHasMaster(string $path)
{
	string $name = openPipelineGetFolderFromPath($path,0);
	string $expectedMasterFile = ($path + $name + "_asset.mb");
	int $exists = `filetest -f $expectedMasterFile`;
	return $exists;
}

global proc int openPipelineComponentHasWorkshop(string $path)
{	
	string $name = openPipelineGetFolderFromPath($path,0);
	string $asset =openPipelineGetFolderFromPath($path,2);
	string $expectedWorkshopFile = ($path + "workshop/"+ $asset + "_" + $name + "_workshop_1.mb");
	//print ("expected workshop:"+$expectedWorkshopFile+"\n");
	int $workshopExists = `filetest -f $expectedWorkshopFile`;
	return $workshopExists;
}

global proc int openPipelineComponentHasMaster(string $path)
{	
	string $name = openPipelineGetFolderFromPath($path,0);
	string $asset = openPipelineGetFolderFromPath($path,2);
	string $expectedMasterFile = ($path + $asset + "_" + $name + ".mb");
	//print ("expected master:"+$expectedMasterFile+"\n\n");
	int $masterExists = `filetest -f $expectedMasterFile`;
	return $masterExists;
}
global proc openPipelineRemoveSecondaryWindows()
{
	if(`window -exists op_saveWorkshopUI`)
		deleteUI op_saveWorkshopUI;
	if(`window -exists op_masterFileUI`)
		deleteUI op_masterFileUI;
	if(`window -exists op_reviveUI`)
		deleteUI op_reviveUI;
}

global proc openPipelineProjSelected()
{	
	int $projIndex = `optionMenuGrp -q -sl projNameMenu`;
	int $currentProjIndex = $projIndex-1;
	string $projList[] = openPipelineGetProjectList();
	//proc located in openPipelineUtility.mel
	string $currentProject = $projList[$currentProjIndex*2+1];
	setProject $currentProject;
	textFieldGrp -e -text $currentProject projPath;
	string $buffer[];
	int $numDepth = `tokenize $currentProject "/" $buffer`;
	
	string $currentProjectShort = $buffer[$numDepth - 1];
	string $libPath = `openPipelineGetPath "lib"`;
	optionVar -sv "op_libPath" $libPath;
	
	string $scenePath = ($currentProject + "/scenes/");
	string $archivePath = ($currentProject + "/archive/");
	optionVar -sv "op_scenePath" $scenePath;
	optionVar -sv "op_archivePath" $archivePath;
	optionVar -sv "op_currOpenPath" "";
	optionVar -sv "op_currOpenType" "";
	optionVar -sv "op_currOpenCategory" "";
	optionVar -iv "op_currOpenVersion" 0;
	//NewScene; //********************** maybe not?
	string $buffer[];
	int $numDepth = `tokenize $currentProject "/" $buffer`;
	//textFieldGrp -label "Project Path : " -text $currentProject -editable false projPath;
	openPipelineUpdateAssetTypeList();
}

global proc openPipelineUpdateAssetTypeList()
{
	string $lastSelectedPaths[] = openPipelineGetSelectedAssetTypes();
	textScrollList -e -ra "op_assetTypeScrollList";
	optionVar -ca "op_assetTypes"; 
	
	string $libPath = `optionVar -q "op_libPath"`; 
	
	string $libTypeFiles[] = `getFileList -folder $libPath`;
	int $numLibType = `size($libTypeFiles)`;
	for($i = 0; $i < $numLibType; $i++)
	{
		optionVar -sva "op_assetTypes" ($libPath+$libTypeFiles[$i]+"/");
		textScrollList -e -a $libTypeFiles[$i] op_assetTypeScrollList;
		if ($lastSelectedPaths[0]==($libPath+$libTypeFiles[$i]+"/"))
		{
			textScrollList -e -si $libTypeFiles[$i] op_assetTypeScrollList;
		}
	}
	int $numSelected = `optionVar -as "op_selectedTypes"`;
	if ($numSelected)
	{
		int $selectedTypes[] = `optionVar -q "op_selectedTypes"`;
		for ($j=0; $j<$numSelected; $j++)
		{
			textScrollList -e -sii $selectedTypes[$j] op_assetTypeScrollList;
		}
	}					
	else
	{
		
	}
		openPipelineAssetTypeSelected();
}

global proc string[] openPipelineGetSelectedAssetTypes()
{
	string $selectedTypePaths[];
	string $types[];
	if (`optionVar -as "op_assetTypes"`)
	{
		$types = `optionVar -q "op_assetTypes"`;
		int $selectedTypes[] = `textScrollList -q -sii op_assetTypeScrollList`;
		if (size($selectedTypes))
		{
			for ($i=0; $i<(size($selectedTypes)); $i++)
			{
				$selectedTypePaths[$i] = $types[$selectedTypes[$i]-1];
			}
		}
	}
		return $selectedTypePaths;
}

global proc string openPipelineGetSelectedAsset()
{
	string $selectedAssetPath="";
	string $assets[];
	if (`optionVar -as "op_assets"`)
	{
		$assets = `optionVar -q "op_assets"`;
		int $selectedAsset[] = `textScrollList -q -sii op_assetScrollList`;
		if ($selectedAsset[0])
		{
			$selectedAssetPath = $assets[($selectedAsset[0])-1];
		}
	}
	return $selectedAssetPath;
}

global proc string openPipelineGetSelectedComponent()
{
	string $selectedCompPath;
	string $components[];
	if (`optionVar -as "op_components"`)
	{
		$components = `optionVar -q "op_components"`;
		int $selected[] = `textScrollList -q -sii "op_componentScrollList"`;
		if (size($selected))
		{
			$selectedCompPath = $components[($selected[0])-1];
		}
	}
	return $selectedCompPath;
}


global proc openPipelineAssetTypeSelected()
{
	//global string $openPipeline_menuCurrentAssetType="";//***********global
	//string $lastSelection[] = `textScrollList -q -si "op_assetScrollList"`;
	string $lastSelectedPath = openPipelineGetSelectedAsset();
	textScrollList -e -ra "op_assetScrollList";
	optionVar -ca "op_assets";
	int $active = 0;
	
	string $selectedTypes[] = openPipelineGetSelectedAssetTypes();

	if (size($selectedTypes))
	{
		for ($i=0; $i<(size($selectedTypes)); $i++)
		{
			string $currType = $selectedTypes[$i];
			//$openPipeline_menuCurrentAssetType = openPipelineGetFolderFromPath($currType,0); //***********global
			string $assetFiles[] = `getFileList -folder $currType`;
			int $numAssets = `size($assetFiles)`;
			if ($numAssets)
				$active = 1;
		
			for ($j = 0; $j < $numAssets; $j++)
			{
				string $assetPath = $currType + $assetFiles[$j] + "/";
				optionVar -sva "op_assets" ($assetPath);
				string $post="";
				string $pre="";
				
				int $masterExists = openPipelineAssetHasMaster($assetPath);
				int $workshopExists = openPipelineAssetHasWorkshop($assetPath);
				if($masterExists)
				{
					$post+=" +";
				}
				else if ($workshopExists)
				{
					$post+=" -";
				}
							
				if ($assetPath == `optionVar -q "op_currOpenPath"`)
				{
					$pre = "*";
					$post+=" *";
				}
				textScrollList -e -a ($pre+$assetFiles[$j]+$post) "op_assetScrollList";
				if ($lastSelectedPath==$assetPath)
					textScrollList -e -si ($pre+$assetFiles[$j]+$post) "op_assetScrollList";
			}
			
		}
		
	}
		button -e -en (size($selectedTypes)) op_assetTypeRemoveButton;
		if (size($selectedTypes)==1)
			button -e -en 1 op_assetNewButton;
		else
			button -e -en 0 op_assetNewButton;
	textScrollList -e -en $active "op_assetScrollList";

	openPipelineAssetSelected();
}

global proc openPipelineAssetSelected()
{
	//global string $openPipeline_menuCurrentAsset="";//*******************global
	string $lastSelectedPath = openPipelineGetSelectedComponent();
	textScrollList -e -ra "op_componentScrollList";
	optionVar -ca "op_components";
	int $active = 0;
	
	string $currAsset = openPipelineGetSelectedAsset();
	int $selected = 1;
	if ($currAsset=="")
		$selected = 0;
	
		menuItem -e -en $selected op_assetMenuEdit;
		menuItem -e -en $selected op_assetMenuView;
		menuItem -e -en $selected op_assetMenuImport;
		menuItem -e -en $selected op_assetMenuReference;
		
		menuItem -e -en $selected op_assetMenuEdit2;
		menuItem -e -en $selected op_assetMenuView2;
		menuItem -e -en $selected op_assetMenuImport2;
		menuItem -e -en $selected op_assetMenuReference2;
		
		button -e -en $selected op_assetRemoveButton;
		button -e -en $selected op_componentNewButton;
	
	if ($selected)
	{
		//$openPipeline_menuCurrentAsset = openPipelineGetFolderFromPath($currAsset,0);//*******************global
		string $compPath = ($currAsset +"/components/");
		string $compFiles[] = `getFileList -folder $compPath`;
		int $numComps = `size($compFiles)`;
			
		openPipelineUpdateAssetMenus($currAsset);
		
		if ($numComps)
		{
			$active = 1;
		}
			
		for($j = 0; $j < $numComps; $j++)
		{
			string $post="";
			string $pre="";
			string $componentPath = ($compPath + $compFiles[$j] + "/");
			optionVar -sva "op_components" $componentPath;
			int $masterExists = openPipelineComponentHasMaster($componentPath);
			int $workshopExists = openPipelineComponentHasWorkshop($componentPath);
				
	
			if($masterExists)
			{
				$post+=" +";
			}
			else if ($workshopExists)
			{
				$post+=" -";
			}
							
			if($componentPath == `optionVar -q "op_currOpenPath"`)
			{
				$pre = "* ";
				$post+=" *";
			}
			textScrollList -e -a ($pre+$compFiles[$j]+$post) "op_componentScrollList";
			if ($lastSelectedPath==$componentPath)
				textScrollList -e -si ($pre+$compFiles[$j]+$post) "op_componentScrollList";
		}
				
		openPipelineAssetInformation;
		openPipelineLoadAssetNote;	
	}

	textScrollList -e -en $active "op_componentScrollList";
	openPipelineComponentSelected();
}

global proc openPipelineComponentSelected()
{
	//global string $openPipeline_menuCurrentAssetComponent="";//*****************global
	string $currComponent = openPipelineGetSelectedComponent();
	int $selected = 1;
	if ($currComponent=="")
		$selected = 0;
	
	menuItem -e -en $selected op_compMenuEdit;
	menuItem -e -en $selected op_compMenuView;
	menuItem -e -en $selected op_compMenuImport;
	menuItem -e -en $selected op_compMenuReference;
	menuItem -e -en $selected op_compMenuView2;
	menuItem -e -en $selected op_compMenuImport2;
	menuItem -e -en $selected op_compMenuReference2;
	menuItem -e -en $selected op_compMenuEdit2;
	button -e -en $selected op_componentRemoveButton;
	
	
	if ($selected)
	{
		//$openPipeline_menuCurrentAssetComponent=openPipelineGetFolderFromPath($currComponent,0);//*****************global
		openPipelineUpdateComponentMenus($currComponent);
	}
	openPipelineUpdateCurrentlyOpen();
}


global proc openPipelineAboutDialog()
{
	if (`window -q -exists infoWindow`)
	{
		deleteUI infoWindow;	
	}
	
	string $infoWindow = `window 
			-title "About openPipeline"
			-widthHeight 300 250
			infoWindow`;

	columnLayout -adjustableColumn true;
		scrollField -wordWrap true -width 300 -height 200
			-text ("openPipeline\n\nopenPipeline is an open source, free, " + 
				"and customizable pipeline for production (in Autodesk Maya)." + 
				"\n\nCreated by:\n Rob O'Neill (roneill@dal.pratt.edu)\n " +
				"Meng-Han Ho (mho@pratt.edu)\n Paris Mavroidis (pmavroid@pratt.edu)" + 
				"\n\nMore information may be found at:\n http://openpipeline.sourceforge.net/")
				-editable false;
				
 	    button -label "Close" -command ("deleteUI -window " + $infoWindow);
 	setParent ..;
 	window -e -widthHeight 300 250 $infoWindow;
 	showWindow $infoWindow;		
}


global proc openPipelineHelpLaunch()
{
	string $URL = "\"http://openpipeline.sourceforge.net/\"";
	showHelp -absolute $URL;	
}	


/*
global proc openPipelineAssetPopUpMenus(string $elementName, string $list)
{
	// bug: figure out how to right click select within textscroll list			
	popupMenu -parent $list; //-postMenuCommand; //("textScrollList -e -selectItem " + $elementName + " " +  $listassetIn);
	//popupMenu;
	menuItem -label "Open" -subMenu 1;
		menuItem -label "Open Workshop" -command "openPipelineOpenFile workshop";
		menuItem -label "Open Master" -command "openPipelineOpenFile master";
	setParent -menu ..;

	menuItem -label "Save" -subMenu 1;
		menuItem -label "Save Workshop" -command "openPipelineSaveFile workshop";
		menuItem -label "MASTER FILE" -command "openPipelineSaveMasterFileGUI";
	setParent -menu ..;

	menuItem -label "Import" -subMenu 1;
		menuItem -label "Import Workshop" -command "openPipelineImportFile workshop";
		menuItem -label "Import Master" -command "openPipelineImportFile master";
	setParent -menu ..;

	menuItem -label "Reference" -subMenu 1;
	menuItem -label "Reference Workshop" -command "openPipelineReferenceFile workshop";
	menuItem -label "Reference Master" -command "openPipelineReferenceFile master";	
	setParent -menu ..;

	menuItem -label "New" -subMenu 1;
 	menuItem -label "New Asset Type" -command "openPipelineNewAssetTypeUI";
	menuItem -label "New Asset" -command "openPipelineNewAssetUI";
	menuItem -label "New Component Type" -command "openPipelineNewAssetComponentUI";
	setParent -menu ..;

	menuItem -label "Delete Asset" -command "openPipelineDeleteAsset";

}
*/

global proc openPipelineNewAssetTypeUI()
{
	string $assetType;
  string $error="";
	string $result = `promptDialog 
		-title "new asset type"
		-message "asset type name:\n(no spaces or special characters\nmax length: 16 characters)"
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if ($result == "create")
	{
		$assetType = strip(`promptDialog -query -text`);
		
 			if (size($assetType)>16)
				$error+="Asset Type Name too long (max 16 chars.).\n";
			if (!isValidString($assetType, "([a-zA-Z0-9_])*"))
				$error+="Invalid Asset Type Name (no special characters or spaces allowed).\n";
				
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineMakeNewAssetTree "assettype" $assetType;
			openPipelineUpdateAssetTypeList();			
		}
	}
	
}



global proc openPipelineNewAssetUI()
{
	//string $libPath = `openPipelineGetPath "lib"`;
  string $error="";
	string $result = `promptDialog 
		-title "new asset"
		-message "asset name:\n(no spaces or special characters\nmax length: 12 characters)"
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		
 		$assetName = strip(`promptDialog -query -text`);
		
 		if (size($assetName)>12)
			$error+="Asset Name too long (max 12 chars.).\n";
		if (!isValidString($assetName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Asset Name (no special characters or spaces allowed).\n";
				
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewAssetProcess($assetName);
			openPipelineAssetTypeSelected();			
		}
	}
}

global proc string openPipelineGetFolderFromPath(string $path, int $offsetFromLast)
{
	string $tokenizedPath[];
	int $depth = tokenize($path,"/",$tokenizedPath);
	return ($tokenizedPath[$depth-1-$offsetFromLast]);
}

global proc openPipelineNewAssetProcess(string $assetName)
{
	global string $openPipeline_menuCurrentAssetType;
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_assetTypeScrollList`;
	string $assetTypes[] = `optionVar -q "op_assetTypes"`;
	string $assetTypePath = $assetTypes[$indexSelected[0]-1];
	//string $assetTypeName = openPipelineGetFolderFromPath($assetTypePath,0);
	

	if (`filetest -d ($assetTypePath + $assetName)`)
			$error+=("asset \""+$assetName+"\" already exists!");

	if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
 		}	
	else
	{
		//$openPipeline_menuCurrentAssetType = $assetTypeName;
		openPipelineMakeNewAssetTree "asset" $assetName;
 	}
}

global proc openPipelineNewAssetComponentUI()
{
	//string $assetComponent;
	string $error;
	string $result = `promptDialog 
		-title "new component"
		-message "component name:\n(no spaces or special characters\nmax length: 12 characters)"
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		$componentName = strip(`promptDialog -query -text`);
		if (size($componentName)>12)
			$error+="Component Name too long (max 12 chars.).\n";
		if (!isValidString($componentName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Component Name (no special characters or spaces allowed).\n";
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewComponentProcess($componentName);
			openPipelineAssetSelected();
		}
	}
}
global proc openPipelineNewComponentProcess(string $componentName)
{
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_assetScrollList`;
	string $assets[] = `optionVar -q "op_assets"`;
	string $assetPath = $assets[$indexSelected[0]-1];
	//string $assetName = openPipelineGetFolderFromPath($assetPath,0);
	//string $assetTypeName = openPipelineGetFolderFromPath($assetPath,1);
	
	//string $assetPath = $assetTypePath + $assetName;
	if (`filetest -d ($assetPath + "components/" + $componentName)`)
			$error+=("component \""+$componentName+"\" already exists!");
		


	if($error != "")
	{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
	}	
	else
	{
		//$openPipeline_menuCurrentAsset = $assetName;
		//$openPipeline_menuCurrentAssetType = $assetTypeName;
		print($openPipeline_menuCurrentAsset+"\n");
		openPipelineMakeNewAssetTree "component" $componentName;
	}
}
	
global proc openPipelineSaveMasterFileGUI()
{
	string $windowExists = `window -exists op_masterFileUI`;
	if($windowExists == 1)
	{
		//print "here!";
		deleteUI op_masterFileUI;
	}
	
	window -t "Master File Switchboard" -w 300 -h 150 op_masterFileUI;

	columnLayout -rs 5 -co "both" 10;
	rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
		// flatten reference...
		checkBox -label "Import Reference" -v 1 masterImportReferencesBox;
		//  ...
		checkBox -label "Help Homeless" -v 1 someother;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
		// check clashing...	
		checkBox -label "Check Clashing" -v 1 masterCheckClashingBox;
		//  ...
		checkBox -label "Send Email" -v 1;
	setParent ..;
	

	// notes...
	rowLayout -numberOfColumns 2 -cw2 60 230 -cl2 "center" "center";
		text -l "comment: " -w 60 -h 20;
		scrollField -w 190 -h 40 -ww 1 op_masterCommentField;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 125 125 -cl2 "center" "center";
		button -w 125 -l "MASTER" -c "openPipelineSaveMasterFileWrapper" -bgc .9 .7 .4;
		button -w 125 -l "cancel" -c "deleteUI op_masterFileUI;" -bgc .8 .4 .4;
	setParent..;

	window -e -w 280 -h 145 op_masterFileUI;
	showWindow op_masterFileUI;
	
}

global proc openPipelineSaveWorkshopGUI()
{
	//openPipelineSaveFile workshop
	string $windowExists = `window -exists op_saveWorkshopUI`;
	if($windowExists == 1)
	{
		//print "here!";
		deleteUI op_saveWorkshopUI;
	}
	
	window -t "Save Workshop" -w 300 -h 85 op_saveWorkshopUI;

	columnLayout -rs 5 -co "both" 10;
	
	// notes...
	rowLayout -numberOfColumns 2 -cw2 60 230 -cl2 "center" "center";
		text -l "comment: " -w 60 -h 20;
		textField -w 190 -h 20 op_saveWorkshopCommentField;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 125 125 -cl2 "center" "center";
		button -w 125 -l "SAVE WORKSHOP" -c "openPipelineProcessAssetSave workshop" -bgc .8 .6 .5;
		button -w 125 -l "cancel" -c "deleteUI op_saveWorkshopUI;" -bgc .8 .4 .4;
	setParent..;

	window -e -w 280 -h 85 op_saveWorkshopUI;
	showWindow op_saveWorkshopUI;
}

global proc openPipelineReviveGUI()
{
	string $currPath = `optionVar -q "op_currOpenPath"`;
	//string $currType = `optionVar -q "op_currOpenType"`;
	//string $currCat = `optionVar -q "op_currOpenCategory"`;
	//int $currVersion = `optionVar -q "op_currOpenVersion"`;
	//string $assetName = openPipelineGetFolderFromPath($currPath,0);
	string $workshop = ($currPath + "workshop/");
	string $workshopFiles[] = `getFileList -folder $workshop -filespec ("*_workshop_*.mb")`;
	int $numVersions = `size($workshopFiles)`;
	
	if(`window -exists op_reviveUI`)
		deleteUI op_reviveUI;
	window -t "Revive Workshop" -w 200 -h 85 op_reviveUI;

	columnLayout -rs 5 -co "both" 10;
	
	// notes...
	rowLayout -numberOfColumns 2 -cw2 130 50 -cl2 "left" "right";
		text -l "select version to revive: " -w 130 -h 30 -al "left";
		optionMenu -w 50 -h 30 op_reviveVersionMenu;
			int $i;
			for ($i=1;$i<=$numVersions;$i++)
				menuItem -l $i;
	setParent..;
	
	scrollField -editable 0 -text "version description" -w 170 -h 100;
	
	rowLayout -numberOfColumns 2 -cw2 85 85 -cl2 "center" "center";
		button -w 85 -l "REVIVE" -c "openPipelineReviveWorkshopCallback" -bgc .5 .7 .7;
		button -w 85 -l "cancel" -c "deleteUI op_reviveUI" -bgc .8 .4 .4;
	setParent..;
	optionMenu -e -sl $numVersions op_reviveVersionMenu;
	window -e -w 200 -h 200 op_reviveUI;
	showWindow op_reviveUI;
}
	
global proc openPipelineReviveWorkshopCallback()
{
	string $currPath = `optionVar -q "op_currOpenPath"`;
	//string $currType = `optionVar -q "op_currOpenType"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	//int $currVersion = `optionVar -q "op_currOpenVersion"`;
	//string $assetName = openPipelineGetFolderFromPath($currPath,0);
	string $workshop = ($currPath + "workshop/");
	string $workshopFiles[] = `getFileList -folder $workshop -filespec ("*_workshop_*.mb")`;
	int $numVersions = `size($workshopFiles)`;
	int $reviveVersion = `optionMenu -q -v op_reviveVersionMenu`;
	int $versionOffset = $numVersions-$reviveVersion;
	if ($currCat=="asset")
		openPipelineAssetAction workshop $versionOffset open 1;
	else if ($currCat=="component")
		openPipelineComponentAction workshop $versionOffset open 1;
	//deleteUI op_reviveUI;
}



global proc openPipelineNewSceneProcess(string $type, string $field)
{
	
	string $name;
	
	// query ui for data
	if($type == "shottype")
	{
		$name = "hold";
	}
	else
	{
		$name = `textField -q -text $field`;
	}
	
	// test to see if asset exists
	string $currentListItems[] = `openPipelineGetSceneList $type`;
	string $eachItem;
	for	($eachItem in $currentListItems)
	{
		if($eachItem == $name)
		{	
			 error("openPipeline: " + $type + " : " + $name + " exists.\n");
			 return;
		}		
	}

 	openPipelineMakeNewAssetTree $type $name;
 	
 	// refresh UI (should just refresh the needed lists)
	openPipelineUI;	
}


/*
global proc openPipelineSelectAsset(string $type, string $selectedAsset)
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetType = $type;
	$openPipeline_menuCurrentAsset = $selectedAsset;
	$openPipeline_menuCurrentAssetComponent = "";

	openPipelineAssetInformation;
	openPipelineExpandAssetInventory;

	iconTextRadioButton -e
		-bgc 1 1 0
		-collection assetInventory
		($selectedAsset + "AssetButton");

	openPipelineLoadAssetNote;
	
	openPipelineUpdateRevisionUI;
}
*/

/*
global proc openPipelineSelectAssetComponent(string $selectedAssetComponent)
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetComponent = $selectedAssetComponent;

	openPipelineAssetInformation;

	iconTextRadioButton -e
		-bgc 1 1 0
		-collection assetInventory
		($selectedAssetComponent + "AssetComponentButton");

	openPipelineLoadAssetNote;
	
	openPipelineUpdateRevisionUI;
}
/*



/*
global proc openPipelineExpandAssetInventory()
{

	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	global string $openPipeline_currentOpenAssetComponent;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	$openPipeline_menuCurrentAssetComponent = "";

	string $assetFiles[] = `getFileList -folder ($libPath + $openPipeline_menuCurrentAsset + "/components/")`;

	// clear the collection
	string $buttons[] = `iconTextRadioCollection -q -cia assetComponentInventory`;
	for($button in $buttons)
	{
		deleteUI $button;
	}
	scrollLayout -e -h 200 assetComponentScrollLayout;
	int $numAsset = `size($assetFiles)`;

	for($i = 0; $i < $numAsset; $i++)
	{
		string $font;
		string $chomp = `match "^[a-zA-Z_0-9]+" $assetFiles[$i]`;
		string $expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset
				 + "/components/" + $chomp + "/" + 
				$openPipeline_menuCurrentAsset + "_" + $chomp + ".mb");
		
		int $masterExists = `filetest -f $expectedMasterFile`;
		if($masterExists)
		{
			$font = "plainLabelFont";
		}else{
			$font = "obliqueLabelFont";			
		}
		if($chomp == $openPipeline_currentOpenAssetComponent)
		{
			$font = "smallBoldLabelFont";
		}
		
		iconTextRadioButton  
			-w 100 -h 15 -style "iconAndTextCentered"  
			-l $chomp
			-onc ("openPipelineSelectAssetComponent " + $chomp)
			-ofc ("openPipelineDeSelectAssetComponent " + $chomp)
			-bgc 1 1 1
			-align "left"
			-font $font
			-collection assetComponentInventory
			-parent assetComponentColumn
			($chomp + "AssetComponentButton");		

		openPipelineAssetPopUpMenus($chomp, "assetComponentScrollLayout");	
	}
	openPipelineLoadAssetNote;
	
}
*/

// fill the asset information box with the collected info
//
global proc	openPipelineAssetInformation()
{
	string $temp[];
	string $foo;
	global string $openPipeline_menuCurrentAssetType;
	$temp = `openPipelineGetSelectedAssetTypes`;
	$openPipeline_menuCurrentAssetType = openPipelineGetFolderFromPath($temp[0], 0);

	global string $openPipeline_menuCurrentAsset;
	$foo = `openPipelineGetSelectedAsset`;
	$openPipeline_menuCurrentAsset = openPipelineGetFolderFromPath($foo, 0);	

	global string $openPipeline_menuCurrentAssetComponent;
	$foo = `openPipelineGetSelectedComponent`;
	$openPipeline_menuCurrentAssetComponent = openPipelineGetFolderFromPath($foo, 0);	

	string $libPath = `optionVar -q "op_libPath"`; 

	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	int $workshopNum;	
	int $versionNum;
	int $masterExists;
	int $currentVersion;
	string $expectedMasterFile;
	
	if($openPipeline_menuCurrentAssetComponent == "")
	{
		$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$version = ($libPath + $openPipeline_menuCurrentAsset + "/version/");
		$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_version_*.mb")`;
		$versionNum = `size($versionFiles)`;
		$expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset + "/" + $openPipeline_menuCurrentAsset + "_asset.mb");
		$masterExists = `filetest -f $expectedMasterFile`;

	} else {	
		$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`;
		$version = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/version/");
		$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_version_*.mb")`;
		$versionNum = `size($versionFiles)`;		
		$expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/"+ $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + ".mb");
		$masterExists = `filetest -f $expectedMasterFile`;
	}
	
	// mastered?
	string $fileMastered;
	string $masterDate;
	if($masterExists == 1)
	{
		// windows solution
		$expectedMasterFile = `toNativePath($expectedMasterFile)`;
		string $str = `system ("dir " + $expectedMasterFile)`;
		string $masterDate = `match "[0-9]+/[0-9]+/[0-9]+" $str`;
		
		$fileMastered = ("Mastered?: Yes \nDate: " + $masterDate + "\n");
	} else {
		$fileMastered = ("Mastered?: No \n");
	}

	// current version
	if($versionNum > 0)
	{
		$currentVersion = ($versionNum);
	}else{
		$currentVersion = 0;	
	}
	
	// format information
	string $assetInfoHeader = ($openPipeline_menuCurrentAsset + " : " + 
			$openPipeline_menuCurrentAssetComponent + "\n-------------------\n");

	string $current = ("Latest Master: " + $currentVersion + "\n");
	string $workshopTotal = ("Workshops: " + $workshopNum + "\n");		
	string $versionTotal = ("Versions: " + $versionNum + "\n");	

	string $outputText = ($assetInfoHeader + $current + $workshopTotal + $versionTotal + $fileMastered);
	
	// fill box
	scrollField -e -text $outputText op_infoField;
	
}

//For Proj Set up 


//query winPos
global proc openPipelineRefreshUIPos()
{
	global int $openPipeline_winPos[];
	
	$openPipeline_winPos = `window -q -tlc openPipelineUI`;
}

global proc openPipelineUpdateAssetMenus(string $assetPath)
{
	int $hasMaster = openPipelineAssetHasMaster($assetPath);
	int $hasWorkshop = openPipelineAssetHasWorkshop($assetPath);
	menuItem -e -en $hasMaster op_assetMenuView;
	menuItem -e -en $hasMaster op_assetMenuImportMaster;
	menuItem -e -en $hasMaster op_assetMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_assetMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_assetMenuReferenceWorkshop;
		
	menuItem -e -en $hasMaster op_assetMenuView2;
	menuItem -e -en $hasMaster op_assetMenuImportMaster2;
	menuItem -e -en $hasMaster op_assetMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_assetMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_assetMenuReferenceWorkshop2;
}

global proc openPipelineUpdateComponentMenus(string $componentPath)
{
	int $hasMaster = openPipelineComponentHasMaster($componentPath);
	int $hasWorkshop = openPipelineComponentHasWorkshop($componentPath);
	menuItem -e -en $hasMaster op_compMenuView;
	menuItem -e -en $hasMaster op_compMenuImportMaster;
	menuItem -e -en $hasMaster op_compMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_compMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_compMenuReferenceWorkshop;
	
	menuItem -e -en $hasMaster op_compMenuView2;
	menuItem -e -en $hasMaster op_compMenuImportMaster2;
	menuItem -e -en $hasMaster op_compMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_compMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_compMenuReferenceWorkshop2;
}