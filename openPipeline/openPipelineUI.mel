//
// GUI
//

//build user interface
//
global proc openPipelineUI()
{
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;
	global string $openPipeline_currentOpenAsset;
	global string $openPipeline_currentOpenAssetComponent;
	global string $openPipeline_currentOpenAssetComponentString;
	
	global string $openPipeline_userName;
	global int $openPipeline_currentProjIndex;
	global int $openPipeline_winPos[];

	string $projList[] = openPipelineGetProjectList();
	int $numProjects = size($projList)/2;
	if ($numProjects)
	{
	string $windowExists = `window -q -exists openPipelineUI`;
	if ($windowExists == 1)
	{
		openPipelineRefreshUIPos;
		deleteUI openPipelineUI;
	}
	//get proj dir through proc openPipelineGetProjList
	//proc located in openPipelineUtility.mel
	string $currentProject = $projList[$openPipeline_currentProjIndex*2+1];

	string $libPath = ($currentProject + "/lib/");
	string $scenePath = ($currentProject + "/scenes/");
	
	//tokenize the currentProj dir string, separated by "/"
	//store the last one into $currentProjectShort
	string $buffer[];
	int $numDepth = `tokenize $currentProject "/" $buffer`;
	string $currentProjectShort = $buffer[$numDepth - 1];

	//setProject to selected proj dir
	setProject $currentProject;
	
	//window setup
	string $window = `window -w 410 -h 650 -mxb 0 -rtf 0 -menuBar true -title ("openPipeline v0.1: " + $currentProjectShort) openPipelineUI`;

	// menu (more can go here)
 	menu -label "New" -parent $window;
 		menuItem -label "New Asset Type" -command openPipelineNewAssetTypeUI;
 		menuItem -label "New Asset" -command openPipelineNewAssetUI;
		menuItem -label "New Component Type" -command openPipelineNewAssetComponentUI;
		
 	menu -label "Maya Tools" -parent $window;
 		menuItem -label "Maya Reference Editor" -command "ReferenceEditor";
 		menuItem -label "Maya Project Manager" -command "projectSetup 2";

 	menu -label "Help" -helpMenu true -parent $window;
 		menuItem -label "About openPipeline..." -command openPipelineAboutDialog;
 		menuItem -label "Help..." -command openPipelineHelpLaunch;


	//starting formlayout
	string $form = `formLayout`;	

	//--------------------------------------------
	//columnLayout for basic info on the top of UI
	//including Login User, Proj Name, Proj Path
	//
	columnLayout infoUI;
			
	textFieldGrp -label "Login User : " -text $openPipeline_userName -editable false userName;
	rowColumnLayout -numberOfColumns 2 -cw 1 280 -cw 2 100;
	optionMenuGrp -label "Project Name : " -cl2 "right" "left" -columnWidth2 140 200 -cc "openPipelineProjSelected" projNameMenu;
			
	//call proc openPipelineGetProjList to get the existed proj size and name one by one
	//proc located in openPipelineUtility.mel
	for($i=0; $i<$numProjects; $i++)
	{
		string $temp_projName = $projList[$i*2];
		menuItem -label $temp_projName;
	}
			
	//set the path name according to the selected proj name
	optionMenuGrp -edit -sl ($openPipeline_currentProjIndex+1) projNameMenu;	
	button -label "Project Manager..." -c "openPipelineProjectUI" projManagerButton;
	setParent..;
	textFieldGrp -label "Project Path : " -text $currentProject -editable false projPath;

	textFieldGrp -label "CURRENT OPEN FILE :" -text $openPipeline_currentOpenAssetComponentString -editable false currentFileText;

	setParent ..;
	setParent..;


	//
	//end of columnLayout infoUI
	//--------------------------
				 		
	//tab layout for switching btw project and Scenes Inventory
	string $tabs = `tabLayout -scr 0 -innerMarginWidth 0 -innerMarginHeight 0`;

	//-------------------------
	//main column : Project Tab
	//this is the first column that will be attached to the tab layout
	//
	columnLayout mainColumnLayout;
		
				//------------------------------
				//UI of Project Inventory starts
				//
				separator -style "double" -w 410;
				text -label "ASSET INVENTORY";
				separator -style "double" -w 410;

				//
				rowLayout -numberOfColumns 4 -cw4 50 50 100 100;
					text -label "Assets";
					checkBox -label "Type" -v 1 assetCheckBox;
					text -label "Components";
					text -label "Information";
				setParent ..;

				rowLayout -numberOfColumns 3 -h 200 -w 400 -bgc 1 1 1;

				// Asset List
				scrollLayout -backgroundColor 1 1 1 -w 100 -h 200 -hst 0 assetScrollLayout;
					columnLayout -h 200 -w 100 -bgc 1 1 1 assetColumn;
					iconTextRadioCollection assetInventory;
				
					// Asset Type Inventory
					string $libTypeFiles[] = `getFileList -folder $libPath`;
					int $numLibType = `size($libTypeFiles)`;
					for($i = 0; $i < $numLibType; $i++)
					{
						if(`checkBox -q -value assetCheckBox` == 1)
						{
							iconTextRadioButton 
								-w 100 -h 15 
								-style "iconAndTextCentered"  
								-l $libTypeFiles[$i]
								-font "smallBoldLabelFont"
								-enable 0
								-align "left"
								-bgc 0.5 0.5 0.5
								-collection assetInventory
								($libTypeFiles[$i] + "AssetTypeButton");
						}
					
						// Asset Inventory
						string $libSubPath = ($libPath + $libTypeFiles[$i] + "/");
						string $libFiles[] = `getFileList -folder $libSubPath`;
						int $numLib = `size($libFiles)`;
	
						for($j = 0; $j < $numLib; $j++)
						{
							string $font;
							string $chomp = `match "^[a-zA-Z_0-9]+" $libFiles[$j]`;
							
							string $expectedMasterFile = ($libSubPath + $chomp + "/" + $chomp + "_asset.mb");
							int $masterExists = `filetest -f $expectedMasterFile`;
							if($masterExists)
							{
								$font = "plainLabelFont";
							}else{
								$font = "obliqueLabelFont";			
							}
							
							if($chomp == $openPipeline_currentOpenAsset)
							{
								$font = "smallBoldLabelFont";
							}
		
							iconTextRadioButton 
								-w 100 -h 15 
								-style "iconAndTextCentered"  
								-l $chomp
								-font $font
								-align "left"
								-onc ("openPipelineSelectAsset " + $libTypeFiles[$i] + " " + $chomp)
								-ofc ("openPipelineDeSelectAsset " + $chomp)
								-bgc 1 1 1
								-collection assetInventory
								($chomp + "AssetButton"+$i);
		
							openPipelineAssetPopUpMenus($chomp, "assetScrollLayout");
						}
					}
					scrollLayout -e -h 200 assetScrollLayout;
					setParent ..;
				setParent ..;
				
				// Asset Component List
				scrollLayout -backgroundColor 1 1 1 -w 100 -h 200 -hst 0 assetComponentScrollLayout;
					columnLayout -h 200 -w 100 -bgc 1 1 1 assetComponentColumn;
					iconTextRadioCollection assetComponentInventory;		
					setParent ..;
				setParent ..;
				
				// Asset Information field
				scrollField -w 210 -height 200 -enable 1 -editable 0 -wordWrap 1 
					-backgroundColor 1 1 1 -font "smallPlainLabelFont" 
					-text "" 
					assetInformation;
				setParent ..;


				//----------------------------
				//UI of Pipeline Tools starts
				//
				separator -style "double" -w 410;
				separator -style "double" -w 410;
				text -label "PIPELINE TOOLS";
				separator -style "double" -w 410;
			
				rowLayout -numberOfColumns 2 -w 410 -cw2 120 290;
					columnLayout -w 120 -adjustableColumn 1 workflowColumn;
						button -label "Save Workshop" -width 120 -command "openPipelineSaveFile workshop";
						button -label "MASTER FILE" -width 120 -command "openPipelineSaveMasterFileGUI";
						
						separator -style "double" -w 120;		

						optionMenu 
							-label "Revive:" 
							-changeCommand openPipelineUpdateRevisionUI
							reviveTypeMenu;
							
			 				menuItem -label "workshop";
			 				menuItem -label "master";

						optionMenu -label "Version:" -w 40 reviveVerMenu;	
						button -label "Revive" -width 40 -command "openPipelineReviveAsset";
					setParent ..;
						
					// Asset note frame
					columnLayout -w 290 -columnAlign "right" -adjustableColumn 1;		
					rowLayout -numberOfColumns 1 -cw1 290 -cl1 "right";
						scrollField -w 290 -h 100 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "Nothing here!" noteField;
					setParent ..;
						
					rowLayout -numberOfColumns 2 -cw2 230 60 -cl2 "left" "right";
						textField -w 230 -h 20 commentField;
							
						//proc openPipelineAssetNoteWriter
						//located in openPipelineNotes.mel 
						button -w 60 -h 20 -l "comment" -c "openPipelineAssetNoteWriter add";
					setParent ..;		
				setParent ..;
			setParent ..;
			//end of framlayout:Asset Notes
		
		setParent ..;		
		//UI of Pipeline Tools ends
		//-------------------------	
		//
		//end of main column: Project Tab
		//--------------------------------

	
			//------------------------
			//sec column : Scenes Tab
			//this is the second column that will be attached to the tab layout
			//
			columnLayout secColumnLayout;
			
				//----------------------
				//Scene Inventory starts
				//
				separator -style "double" -w 410;
				text -label "SCENE INVENTORY";
				separator -style "double" -w 410;
	
				
				columnLayout;	
					columnLayout;
								text -w 410 -l "[current scene]";
								setParent..;
								
								columnLayout;
								scrollField -ww true -ed false -w 410 -h 20 -text "N/A";
								setParent..;
								
								columnLayout;
								separator -w 410;
								setParent..;
								
					setParent..;					
		
				
				//proc openPipelineGetProjList
				//located in openPipelineUtility.mel
				//frameLayout -label "Reference Creator" -collapsable 1 -collapse 0 -w 410 -ec "openPipelineGrabFileList availableRefMenu availableAssetList;";
					
					//problem starts here
					columnLayout;//c
											
						rowLayout -numberOfColumns 2 -w 410 -h 440 -cw2 160 250;//rA		
							columnLayout -columnAttach "left" 5 -cw 160 -h 440;//cA	
														
								columnLayout -h 20;//cAa
								
								text -l "Scenes:";
								setParent..;//cAa
								
								
								columnLayout;//cAb
									scrollLayout -w 155 -hst 0 -vst 0 allSceneScroll;//cAba
										columnLayout -cw 155 -h 200;//cAbaa				
											openPipelineSeqFileTreeUI;									
										setParent..;//cAbaa	 
									scrollLayout -e -rc "openPipelineAdjustScrollLayout allSceneScroll 200;" -h 200 allSceneScroll;										
									setParent..;//cAba								
								setParent..;//cAb
								
								
								columnLayout;//cAc
								text -l "Asset:";
								setParent..;//cAc
								
								
								columnLayout;//cAd
								scrollLayout -backgroundColor 1 1 1 -w 155 -hst 0 -vst 0 allAssetScroll;//cAda
									columnLayout -cw 155 -h 200;//cAdaa
										string $validAsset[] = `openPipelineExistedAsset validList`;
										string $invalidAsset[] = `openPipelineExistedAsset invalidList`;
										for($i =0;$i<`size $validAsset`; $i++)
										{
												string $font = "plainLabelFont";
											
												iconTextButton 
												-w 155 -h 20 -style "textOnly"  							
												-l $validAsset[$i]
												-font $font
												-c ("openPipelineCreateReference asset "+$validAsset[$i])
												-bgc 1 1 1 												
												($validAsset[$i]+"_"+$i+"_"+"SelButton");									
												
											
										}
											
										for($i =0;$i<`size $invalidAsset`; $i++)
										{
											string $font ="obliqueLabelFont";
											
												iconTextButton 
												-w 155 -h 20 -style "textOnly"  							
												-l $invalidAsset[$i]
												-font $font
												-en false
												-bgc 1 1 1											
												($invalidAsset[$i]+"_"+$i+"_"+"SelButton");		
											
											
										}		
										setParent..;//cAdaa
														
										scrollLayout -e -rc "openPipelineAdjustScrollLayout allAssetScroll 200;" -h 200 allAssetScroll;							
												 
									setParent..;//cAda
							setParent..;//cAd
							
							setParent..;//cA
							//problem ends here	
							columnLayout -columnAttach "both" 5 -cw 250;//cB
								
								columnLayout;//cBa
								text -l "Ref:";
								setParent..;//cBa
																
								columnLayout col_RefInv;//cBb
								openPipelineRefInvUI;//cBb

								setParent..;
									
								columnLayout;//cBc
									separator -w 200;
								setParent..;//cBc
								
							 	
								columnLayout;//cBd
									
									columnLayout;//cBda
										separator -style "double" -w 205;
										text -label "PIPELINE TOOL";
										separator -style "double" -w 205;
									setParent..;//cBda
										
									columnLayout -w 205 -adjustableColumn 1 workflowColumnForSceneInv;//cBdb
										button -label "Save Workshop" -width 200 -h 30 -command "";
										button -label "MASTER FILE" -width 200 -h 30 -command "";
											
										separator -style "double" -w 200 -h 30;		
					
										optionMenu 
											-label "Revive:" ;
												
								 			menuItem -label "workshop";
								 			menuItem -label "master";
					
										optionMenu -label "Version:" -w 200 reviveVerMenu_SceneInv;	
										button -label "Revive" -width 200 -command "";										
									setParent ..;//cBdb						
								
								setParent..;//cBd
										
										
							setParent..;//cB
							
							setParent..;//rA	
							setParent..;//c	
								
					
					
				frameLayout -label "New Seq/Shots" -collapsable 1 -collapse 0 -w 410 -ec "";
					columnLayout -w 400 -adjustableColumn 1;
					rowLayout -numberOfColumns 3 -cw3 125 200 75 -cl3 "left" "center" "right";
						text -label "Sequence Name:" -width 125;
						string $nameField = `textField -width 200 sequenceNameField`;	
						button -label "New Seq" -width 75 -command "openPipelineNewSceneProcess sequence sequenceNameField";
					setParent ..;

					rowLayout -numberOfColumns 3 -cw3 125 200 75 -cl3 "left" "center" "right";
						text -label "Shot Name:" -width 125;
						string $nameField = `textField -width 200 shotNameField`;	
						button -label "New Shot" -width 75 -command "openPipelineNewSceneProcess shot shotNameField";
					setParent ..;
		
					rowLayout -numberOfColumns 4 -cw4 125 150 25 100 -cl4 "center" "center" "right" "center";
						optionMenuGrp -label "Shot Type:" -cw2 125 150 -columnAlign2 "left" "left" assetComponentTypeMenu;
							menuItem -label "anim";
							menuItem -label "light";
							menuItem -label "effects";						
							menuItem -label "other...";
						setParent ..;
						button 
							-label "New Shot Type" -width 100 -h 20 
							-command "openPipelineNewSceneProcess shottype assetComponentTypeMenu";					
					setParent ..;
				setParent ..;
				setParent ..;
				
				setParent..;	
				setParent..;
				

				//setParent ..;	
				//end of Reference Editor frame 
					
				//
				//end of Scene Inventory
				//----------------------
				
			setParent ..;
			//
			//end of Sec Column 
			//----------------------	
		
			setParent..;
			//
			//end of Tab Layout
			//----------------------
	  			
			//columnLayout : Reresh UI
			columnLayout -cal "center" -cw 410 -cat "left" 2 refreshUIColumn;
				separator -style "double" -w 410;
				separator -style "none" -w 410;
				button -label "Refresh UI" -width 410 -command "openPipelineUI;";
			setParent ..;
			//
			//end of Refresh UI
			//-----------------

		//------------------------------------------
		//tabLayout editing, giving tabs diff names
		//
		tabLayout -edit
		  			-tabLabel mainColumnLayout "Asset Management" -tabLabel secColumnLayout "Scene Management" $tabs;
		//
		//end of tabLayou editing
		//-----------------------
	
		//
		//formLayout editing
		//
		formLayout -edit
				-attachForm    	infoUI     "top"   5
		 		-attachForm     infoUI     "left"   1
		 		-attachNone	  	infoUI     "bottom" 
		 		-attachPosition infoUI     "right"  0 100
				
		 		-attachForm     $tabs     "left"   1
		 		-attachControl 	$tabs     "top" 	 5 infoUI
		 		-attachControl  $tabs     "bottom" 5 refreshUIColumn
		 		-attachPosition $tabs     "right"  0 100
		 	
		 		-attachNone     refreshUIColumn     "top"
		 		-attachForm     refreshUIColumn     "left"   1
		 		-attachForm     refreshUIColumn     "bottom" 5
		 		-attachForm     refreshUIColumn     "right"  5
		 $form;
		//
		//end of formLayout editing
		//


	// display final window, window position is depending on Global Var $openPipeline_winPos[]
	window -e -w 430 -h 650 -tlc $openPipeline_winPos[0] $openPipeline_winPos[1] openPipelineUI;
	showWindow $window;
	
	}else{
		if (`window -q -exists openPipelineUI`)
		{
			openPipelineRefreshUIPos;
			deleteUI openPipelineUI;
		}
		confirmDialog -title "New Directory Created" -bgc .9 .9 .9 -message "No Projects exist. Please add a Project using the Project Manager."
			-button "Ok" -defaultButton "Ok";	
		$openPipeline_currentProjIndex=-1;
		openPipelineProjectUI();
	}
}


global proc openPipelineAboutDialog()
{
	if (`window -q -exists infoWindow`)
	{
		deleteUI infoWindow;	
	}
	
	string $infoWindow = `window 
			-title "About openPipeline"
			-widthHeight 300 200
			infoWindow`;

	columnLayout -adjustableColumn true;
		scrollField -wordWrap true -width 300 -height 150
			-text "openPipeline\nUsage: LOAD \"*\",8,1\n" -editable false;
 	    button -label "Close" -command ("deleteUI -window " + $infoWindow);
 	setParent ..;
 	window -e -widthHeight 300 200 $infoWindow;
 	showWindow $infoWindow;		
}


global proc openPipelineHelpLaunch()
{
	string $URL = "\"http://openpipeline.sourceforge.net/\"";
	showHelp -absolute $URL;	
}	



global proc openPipelineAssetPopUpMenus(string $elementName, string $list)
{
	// bug: figure out how to right click select within textscroll list			
	popupMenu -parent $list; //-postMenuCommand; //("textScrollList -e -selectItem " + $elementName + " " +  $listassetIn);

	menuItem -label "Open" -subMenu 1;
		menuItem -label "Open Workshop" -command "openPipelineOpenFile workshop";
		menuItem -label "Open Master" -command "openPipelineOpenFile master";
	setParent -menu ..;

	menuItem -label "Save" -subMenu 1;
		menuItem -label "Save Workshop" -command "openPipelineSaveFile workshop";
		menuItem -label "MASTER FILE" -command "openPipelineSaveMasterFileGUI";
	setParent -menu ..;

	menuItem -label "Import" -subMenu 1;
		menuItem -label "Import Workshop" -command "openPipelineImportFile workshop";
		menuItem -label "Import Master" -command "openPipelineImportFile master";
	setParent -menu ..;

	menuItem -label "Reference" -subMenu 1;
	menuItem -label "Reference Workshop" -command "openPipelineReferenceFile workshop";
	menuItem -label "Reference Master" -command "openPipelineReferenceFile master";	
	setParent -menu ..;

	menuItem -label "New" -subMenu 1;
 	menuItem -label "New Asset Type" -command "openPipelineNewAssetTypeUI";
	menuItem -label "New Asset" -command "openPipelineNewAssetUI";
	menuItem -label "New Component Type" -command "openPipelineNewAssetComponentUI";
	setParent -menu ..;

	menuItem -label "Delete Asset" -command "openPipelineDeleteAsset";

}


global proc openPipelineNewAssetTypeUI()
{
	string $assetType;

	string $result = `promptDialog 
		-title "openPipeline: new asset type"
		-message "asset type name:"
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		$assetType = `promptDialog -query -text`;
		if($result == "")
		{
			$test = 1;
		}else{
			openPipelineMakeNewAssetTree "assettype" $assetType;
			$test = 0;				
		}
	}
	openPipelineUI;	
}



global proc openPipelineNewAssetUI()
{

	string $libPath = `openPipelineGetPath "lib"`;
			
	if(`window -exists newAsset`) deleteUI newAsset;
	
	window -t "openPipeline: new asset" -w 300 -h 100 newAsset;

	columnLayout;
	rowLayout -numberOfColumns 2 -cw2 100 200 -cl2 "center" "center";
		text -l "asset name: " -w 100 -h 20;
		textField -w 195 -h 20 newAssetFieldName;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 100 200 -cl2 "center" "center";
		optionMenu -label "asset type" -w 100 newAssetTypeMenu;
		string $libTypeFiles[] = `getFileList -folder $libPath`;
		int $numLibType = `size($libTypeFiles)`;
		for($i = 0; $i < $numLibType; $i++)
		{
 			menuItem -label $libTypeFiles[$i];
 		}
		
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
		button -w 150 -l "create" -c openPipelineNewAssetProcess;
		button -w 150 -l "cancel" -c "deleteUI newAsset;";
	setParent..;

	window -e -w 300 -h 100 newAsset;

	showWindow newAsset;

}


global proc openPipelineNewAssetProcess()
{
	global string $openPipeline_menuCurrentAssetType;

	// query ui for data
	string $name = `textField -q -text newAssetFieldName`;
	string $assetType = `optionMenu -q -value newAssetTypeMenu`;
	
	deleteUI newAsset;

	$openPipeline_menuCurrentAssetType = $assetType;

	// test to see if asset exists
	string $currentListItems[] = `openPipelineGetAssetList "asset"`;
	string $eachItem;
	for	($eachItem in $currentListItems)
	{
		if($eachItem == $name)
		{	
			 error("openPipeline: " + $assetType + " : " + $name + " exists.\n");
			 return;
		}		
	}

 	openPipelineMakeNewAssetTree "asset" $name;
 	
 	// refresh UI
	openPipelineUI;	
}

global proc openPipelineNewAssetComponentUI()
{
	string $assetComponent;

	string $result = `promptDialog 
		-title "openPipeline: new asset component"
		-message "asset component name:"
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		$assetType = `promptDialog -query -text`;
		if($result == "")
		{
			$test = 1;
		}else{
			openPipelineMakeNewAssetTree "component" $assetType;
			$test = 0;				
		}
	}
	openPipelineUI;	
}


global proc openPipelineSaveMasterFileGUI()
{
	string $windowExists = `window -exists masterFileUI`;
	if($windowExists == 1)
	{
		print "here!";
		deleteUI masterFileUI;
	}
	
	window -t "Master File Switchboard" -w 300 -h 150 masterFileUI;

	columnLayout;
	rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
		// flatten reference...
		checkBox -label "Import Reference" -v 1 masterImportReferencesBox;
		//  ...
		checkBox -label "Help Homeless" -v 1 someother;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
		// check clashing...	
		checkBox -label "Check Clashing" -v 1 masterCheckClashingBox;
		//  ...
		checkBox -label "Send Email" -v 1;
	setParent ..;
	

	// notes...
	rowLayout -numberOfColumns 2 -cw2 60 230 -cl2 "center" "center";
		text -l "comment: " -w 60 -h 20;
		textField -w 230 -h 20 masterCommentField;
	setParent..;

	rowLayout -numberOfColumns 2 -cw2 145 145 -cl2 "center" "center";
		button -w 145 -l "save" -c "openPipelineSaveMasterFileWrapper";
		button -w 145 -l "cancel" -c "deleteUI masterNoteUI;";
	setParent..;

	window -e -w 300 -h 150 masterFileUI;
	showWindow masterFileUI;
	
}


global proc openPipelineNewSceneProcess(string $type, string $field)
{
	
	string $name;
	
	// query ui for data
	if($type == "shottype")
	{
		$name = "hold";
	}else{
		$name = `textField -q -text $field`;
	}
	
	// test to see if asset exists
	string $currentListItems[] = `openPipelineGetSceneList $type`;
	string $eachItem;
	for	($eachItem in $currentListItems)
	{
		if($eachItem == $name)
		{	
			 error("openPipeline: " + $type + " : " + $name + " exists.\n");
			 return;
		}		
	}

 	openPipelineMakeNewAssetTree $type $name;
 	
 	// refresh UI (should just refresh the needed lists)
	openPipelineUI;	
}



global proc openPipelineSelectAsset(string $type, string $selectedAsset)
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetType = $type;
	$openPipeline_menuCurrentAsset = $selectedAsset;
	$openPipeline_menuCurrentAssetComponent = "";

	openPipelineAssetInformation;
	openPipelineExpandAssetInventory;

	iconTextRadioButton -e
		-bgc 1 1 0
		-collection assetInventory
		($selectedAsset + "AssetButton");

	openPipelineLoadAssetNote;
	
	openPipelineUpdateRevisionUI;
}

global proc openPipelineSelectAssetComponent(string $selectedAssetComponent)
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetComponent = $selectedAssetComponent;

	openPipelineAssetInformation;

	iconTextRadioButton -e
		-bgc 1 1 0
		-collection assetInventory
		($selectedAssetComponent + "AssetComponentButton");

	openPipelineLoadAssetNote;
	
	openPipelineUpdateRevisionUI;
}


global proc openPipelineDeSelectAsset(string $selectedAsset)
{
	iconTextRadioButton -e 
		-bgc 1 1 1 
		($selectedAsset + "AssetButton");
}


global proc openPipelineDeSelectAssetComponent(string $selectedAsset)
{
	iconTextRadioButton -e 
		-bgc 1 1 1 
		($selectedAsset + "AssetComponentButton");
}


global proc openPipelineExpandAssetInventory()
{

	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	global string $openPipeline_currentOpenAssetComponent;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	$openPipeline_menuCurrentAssetComponent = "";

	string $assetFiles[] = `getFileList -folder ($libPath + $openPipeline_menuCurrentAsset + "/components/")`;

	// clear the collection
	string $buttons[] = `iconTextRadioCollection -q -cia assetComponentInventory`;
	for($button in $buttons)
	{
		deleteUI $button;
	}
	scrollLayout -e -h 200 assetComponentScrollLayout;
	int $numAsset = `size($assetFiles)`;

	for($i = 0; $i < $numAsset; $i++)
	{
		string $font;
		string $chomp = `match "^[a-zA-Z_0-9]+" $assetFiles[$i]`;
		string $expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset
				 + "/components/" + $chomp + "/" + 
				$openPipeline_menuCurrentAsset + "_" + $chomp + ".mb");
		
		int $masterExists = `filetest -f $expectedMasterFile`;
		if($masterExists)
		{
			$font = "plainLabelFont";
		}else{
			$font = "obliqueLabelFont";			
		}
		if($chomp == $openPipeline_currentOpenAssetComponent)
		{
			$font = "smallBoldLabelFont";
		}
		
		iconTextRadioButton  
			-w 100 -h 15 -style "iconAndTextCentered"  
			-l $chomp
			-onc ("openPipelineSelectAssetComponent " + $chomp)
			-ofc ("openPipelineDeSelectAssetComponent " + $chomp)
			-bgc 1 1 1
			-align "left"
			-font $font
			-collection assetComponentInventory
			-parent assetComponentColumn
			($chomp + "AssetComponentButton");		

		openPipelineAssetPopUpMenus($chomp, "assetComponentScrollLayout");	
	}
	openPipelineLoadAssetNote;
	
}

// fill the asset information box with the collected info
global proc	openPipelineAssetInformation()
{
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	int $workshopNum;	
	int $versionNum;
	int $masterExists;
	int $currentVersion;
	string $expectedMasterFile;
	
	if($openPipeline_menuCurrentAssetComponent == "")
	{
		$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$version = ($libPath + $openPipeline_menuCurrentAsset + "/version/");
		$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_version_*.mb")`;
		$versionNum = `size($versionFiles)`;
		$expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset + "/" + $openPipeline_menuCurrentAsset + "_asset.mb");
		$masterExists = `filetest -f $expectedMasterFile`;

	} else {	
		$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`;
		$version = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/version/");
		$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_version_*.mb")`;
		$versionNum = `size($versionFiles)`;		
		$expectedMasterFile = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/"+ $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + ".mb");
		$masterExists = `filetest -f $expectedMasterFile`;
	}
	
	// mastered?
	string $fileMastered;
	string $masterDate;
	if($masterExists == 1)
	{
		// windows solution
		$expectedMasterFile = `toNativePath($expectedMasterFile)`;
		string $str = `system ("dir " + $expectedMasterFile)`;
		string $masterDate = `match "[0-9]+/[0-9]+/[0-9]+" $str`;
		
		$fileMastered = ("File Mastered: Yes (" + $masterDate + ")\n");
	} else {
		$fileMastered = ("File Mastered: No \n");
	}

	// current version
	if($versionNum > 0)
	{
		$currentVersion = ($versionNum + 1);
	}else{
		$currentVersion = 0;	
	}
	
	// format information
	string $assetInfoHeader = ($openPipeline_menuCurrentAsset + " : " + 
			$openPipeline_menuCurrentAssetComponent + "\n-------------------\n\n");

	string $current = ("Latest Mastered Version: " + $currentVersion + "\n\n");
	string $workshopTotal = ("Workshop Files: " + $workshopNum + "\n");		
	string $versionTotal = ("Version Files: " + $versionNum + "\n");	

	string $outputText = ($assetInfoHeader + $current + $workshopTotal + $versionTotal + $fileMastered);
	
	// fill box
	scrollField -e -text $outputText assetInformation;
	
}

global proc openPipelineUpdateRevisionUI()
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetType;	
	global string $openPipeline_menuCurrentAssetComponent;
	
	//proc openPipelineGetPath to get all path
	//located in openPipelineUtility.mel
	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	string $scenePath = `openPipelineGetPath "scenes"`;
	string $assetPath;	
	string $revMenuItems;

	string $reviveMenuItems[] = `optionMenu -q -itemListLong reviveVerMenu`;
	for($each in $reviveMenuItems)
	{
		deleteUI $each;
	}

	string $reviveTypeMenu = `optionMenu -q -value reviveTypeMenu`;
	int $reviveMenuSize = `optionMenu -q -ni reviveVerMenu`;

	int $fileCount;

	if($openPipeline_menuCurrentAssetComponent == "")
	{
		if($reviveTypeMenu == "workshop")
		{
			$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/workshop/");
			$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_workshop_*.mb")`;
			$fileCount = `size($workshopFiles)`;
		}
		else if($reviveTypeMenu == "master")
		{
			$version = ($libPath + $openPipeline_menuCurrentAsset + "/version/");
			$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_version_*.mb")`;
			$fileCount = `size($versionFiles)`;
		}
	} else {
		if($reviveTypeMenu == "workshop")
		{	
			$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/workshop/");
			$workshopFiles = `getFileList -folder $workshop -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_workshop_*.mb")`;
			$fileCount = `size($workshopFiles)`;
		}
		else if($reviveTypeMenu == "master")
		{
			$version = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/version/");
			$versionFiles = `getFileList -folder $version -filespec ($openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_version_*.mb")`;
			$fileCount = `size($versionFiles)`;		
		}
	}

	//bug: current selection of the menuItem will not refresh while there is no any early vision.
	//get the full pathname of optionMenu : reviveVerMenu
	string $allControlsUIFullath[] =`lsUI -ctl -l`;
	string $reviveVerMenuPath;
  	for($me in $allControlsUIFullath)
	{
		if(`gmatch $me "*reviveVerMenu"`)
		{
			$reviveVerMenuPath = $me;
		}
	}

	int $loopSize;
	if($fileCount < $reviveMenuSize)
	{
		$loopSize = $reviveMenuSize;
	}else{
		$loopSize = $fileCount;
	}
	
	for($i=0; $i<$loopSize; $i++)
	{	
		if(`menuItem -exists ("revMenuItem" + $i)`)
		{
			if($i < $fileCount)
			{
				$revMenuItems += ("menuItem -e -label " + $i +" revMenuItem"+ $i + ";");
			}else{				
				deleteUI -mi ("revMenuItem" + $i);
			}
		}else{
			$revMenuItems += ("menuItem -p " + $reviveVerMenuPath + " -label " + $i +" revMenuItem" + $i + ";");
		}				
	}

	eval($revMenuItems);
	
	//reselect the menu item, set it to the latest version by default.
	int $itemSize = `optionMenu -q -ni reviveVerMenu`;
	if($itemSize>0)
	{
		optionMenu -e -sl $itemSize reviveVerMenu;
	}
}


//For Proj Set up 
global proc openPipelineProjSelected()
{
	global int $openPipeline_currentProjIndex;
	
	int $projIndex = `optionMenuGrp -q -sl projNameMenu`;
	$openPipeline_currentProjIndex = $projIndex-1;
	openPipelineUI;	
}

//query winPos
global proc openPipelineRefreshUIPos()
{
	global int $openPipeline_winPos[];
	
	$openPipeline_winPos = `window -q -tlc openPipelineUI`;
}
