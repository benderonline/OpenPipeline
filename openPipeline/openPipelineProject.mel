global proc openPipelineProjectUI()
{
	string $projList[] = openPipelineGetProjectList();
	int $i=0;
	string $windowExists = `window -q -exists openPipelineProjUI`;
	string $dialogExists = `window -q -exists openPipelineProjDialog`;
	if ($windowExists == 1)
	{
		deleteUI openPipelineProjUI;
	}
	if ($dialogExists == 1)
	{
		deleteUI openPipelineProjDialog;
	}
	
	string $projWindow = `window  -w 550 -h 400 -sizeable 0 -mxb 0 -rtf 0 -title ("openPipeline - Project  Manager ") openPipelineProjUI`;
	
	rowColumnLayout -numberOfRows 2 -rh 1 350 -rh 2 30 mainLayout;
		
	scrollLayout 
		-horizontalScrollBarThickness 0 
				-verticalScrollBarThickness   16 layoutA;
				rowColumnLayout -numberOfColumns 4
				-cs 1 20
				-columnWidth 1 150
				-cs 2 10
				-columnWidth 2 200
				-cs 3 10
				-columnWidth 3 50
				-cs 4 10
				-columnWidth 4 50 layoutB;
		
		text -label " "  ;
		text -label " "	 ;
		text -label " "  ;
		text -label " "  ;
		
		int $arraySize = size($projList);
		
		text -label  "Project Name" -fn "boldLabelFont" -align "left";
		text -label  "Project Path" -fn "boldLabelFont"  -align "left";
		text -label " "  ;
		text -label " "  ;
		
		
		text -label "..."  ;
		text -label "..."  ;
		button -label "New..." -c "openPipelineNewProject"; 
		text -label " "  ;
		
	
	string $edit_command;
	string $remove_command;
		
	 
	for ($i=0;$i<size($projList);$i+=2)
	{
	
		textField -ed 0 -text $projList[$i]  -bgc 1 1 1;
		textField -ed 0 -text $projList[$i+1]  -bgc 1 1 1;
		$edit_command = "openPipelineEditProject("+$i+")";
		$remove_command = "openPipelineRemoveProject( " + $i + ",\""+$projList[$i]+"\")";
		button -label "Edit..." -c $edit_command; 
		button -label "Remove" -c $remove_command -bgc .9 .2 .2;
	}
	
	setParent "mainLayout";
	rowColumnLayout -numberOfColumns 2 -columnWidth 1 250 -columnWidth 2 250 -cs 2 20 -cs 1 10;
	string $refresh_cmd = "openPipelineProjectUI";
	button -label "Refresh List" -c $refresh_cmd;
	button -label "Close" -c "openPipelineCloseProjUI";	
	
	setParent ..;
	setParent ..;
	setUITemplate -popTemplate;
	window -e -w 550 -h 400 openPipelineProjUI;
	showWindow;
}

global proc string[] openPipelineGetProjectList()
{
	string $projectsFile = openPipelineGetProjFile();
	string $projectsList[];
	int $i=0;
	if (`filetest -r $projectsFile`)
	{
		int $fileId = `fopen $projectsFile "r"`;
		string $nextLine = `fgetline $fileId`;
		int $numTokens;
		string $buffer[];
		while ( size($nextLine) > 0 ) 
		{ 
			$numTokens = `tokenize $nextLine $buffer`;
			int $j;
			string $filePath="";
			for ($j=3;$j<size($buffer);$j++)
				$filePath+=$buffer[$j]+" ";
			if (($numTokens>=4)&&($buffer[0]=="ProjName:")&&($buffer[2]=="ProjPath:"))
			{
				$projectsList[$i] = strip($buffer[1]);
				$projectsList[$i+1] = strip($filePath);
				$i+=2;
			}
			else if (($buffer[0]!="")&&((substring($buffer[0],1,1))!="*"))
			{
				error("Project File format error");
			}
				
			$nextLine = `fgetline $fileId`;
			
		}
		fclose $fileId;
	}else{
		int $fileId = `fopen $projectsFile "w"`;
		if ($fileId)
			fclose $fileId;
		else
			error("Project File does not exist, could not be opened, or could not be created.");
	}
	return $projectsList;
}

global proc openPipelineCloseProjUI()
{
	deleteUI openPipelineProjUI;
	if (`window -q -exists openPipelineProjDialog`)
		deleteUI openPipelineProjDialog;
}
	
global proc openPipelineCloseProjDialog()
{
	deleteUI openPipelineProjDialog;
	openPipelineProjectUI();	
}
	
global proc openPipelineEditProject(int $index)
{
	string $projectsList[] = openPipelineGetProjectList();
	openPipelineProjDialogWindow(1,$index,$projectsList[$index],$projectsList[$index+1]);
}
	
global proc openPipelineRemoveProject(int $projIndex, string $projName)
{
	global int $openPipeline_currentProjIndex;
	string $messageText = "Are you sure you want to remove project "+ $projName + " ?";
	string $result = `confirmDialog -bgc .9 .9 .9 -title "Remove Project Confirm" -message $messageText
			-button "Yes" -button "Cancel" -defaultButton "Yes"
			-cancelButton "Cancel" -dismissString "Cancel"`;
			
	if ($result == "Yes")
	{
		
		string $projectsList[] = openPipelineGetProjectList();
		
		$projectsList[$projIndex]="";
		$projectsList[$projIndex+1]="";
		if ($openPipeline_currentProjIndex*2>=$projIndex)
		{
			if ($openPipeline_currentProjIndex>0)
				$openPipeline_currentProjIndex--;
		}
		openPipelineRewriteProjFile($projectsList);
	}
}


global proc openPipelineRewriteProjFile(string $projList[])
{
	string $projFile = openPipelineGetProjFile();
	int $i=0;
	if (`filetest -w $projFile`)
	{
		int $fileId = `fopen $projFile "w"`;
		fprint $fileId "* This is a file automatically generated by the openPipelineMaya script *\r\n\r\n";
		for ($i=0;$i<size($projList);$i+=2)
		{
			if($projList[$i]!="")
			{
				$line = "ProjName: "+strip($projList[$i])+" ProjPath: "+strip($projList[$i+1])+"\r\n";
				fprint($fileId,$line);
			}
		}
					
		fclose $fileId;
	}else{ 
		error("Project File " + $projFile + " could not be found, or is not writable.");			
	}
	openPipelineUI();
	openPipelineProjectUI();
}


global proc openPipelineProjDialogWindow(int $mode, int $index, string $defName, string $defPath)
{
	string $windowExists = `window -q -exists openPipelineProjDialog`;
	if ($windowExists == 1)
	{
		deleteUI openPipelineProjDialog;
	}
	string $title_txt;
	if ($mode)
		$title_txt = "Editing Project \""+$defName+"\"";	
	else
		$title_txt = "Create New Project";
	workspace -dir $defPath;
	
	window  -w 300 -h 200 -sizeable 0 -mxb 0 -rtf 0 -title $title_txt openPipelineProjDialog;
		columnLayout  -rs 5 -co "both" 10;
			text -fn "boldLabelFont" -label "Project Name (max length: 18)" -w 280 -align "left";
			//setParent "mainDialogLayout";
			textField -text $defName -w 280 nameTextField;
			//setParent "mainDialogLayout";
			//rowLayout -numberOfColumns 2 -cw2 80 220;
				text -fn "boldLabelFont" -label "Project Path" -w 280 -align "left";
				text  -label "(if folder doesn't already exist it will be created)" -w 280 -align "left";
			//	setParent..;
			//setParent "mainDialogLayout";
			rowLayout   -numberOfColumns 2 -cw2 210 70;
				textField -text $defPath -w 210 pathTextField ;
				//setParent "mainDialogLayout";
				//rowColumnLayout -numberOfColumns 2 -cw 1 220 -cw 2 73;
				//text -label ""; 
				button -label "Browse..." -w 70 -c "fileBrowserDialog -m 4 -fc \"openPipelineSetProjDialogPath\" -an \"Find Location\" ";
				setParent..;
			//setParent "mainDialogLayout";
			separator -style "none" -h 10;
			rowLayout -numberOfColumns 2 -cw 1 140 -cw 2 140;
			string $accept_str = "openPipelineProjDialogCallback("+$mode+","+$index+")";
			button -label "Accept" -c $accept_str -w 140;
			button -label "Cancel" -c "openPipelineCloseProjDialog" -w 140;
	window  -e -w 300 -h 200 openPipelineProjDialog;
	showWindow;
}
	
global proc openPipelineProjDialogCallback(int $mode, int $index)
{
	global int $openPipeline_currentProjIndex;
	string $newName=`textField -q -tx nameTextField`;
	string $newPath = strip(`textField -q -tx pathTextField`);
	int $error = 0;
	int $i=0;
	string $projectsList[] = openPipelineGetProjectList();
	
	string $error_msg = "";
	string $tmp_buffer[];
	tokenize($newName,$tmp_buffer);
	if (size($newName)>18)
	{
		$error=5;
		$error_msg = "Project name is too long.  Please shorten the name by at least "+(size($newName)-18)+" characters.";
	}
	
	else if (($newName=="")||($newPath==""))
	{
		$error=3;
		$error_msg="You cannot leave a field blank. Please try again.";
	}
	
	else if ((size($tmp_buffer)>1))
	{
		$error=4;
		$error_msg="Project Name may not contain spaces. Please try again.";
	}
	
	else
	{
		for ($i=0;$i<size($projectsList);$i+=2)
		{
			if ((!strcmp(strip($projectsList[$i]),strip($newName)))&&($index!=$i))
			{
			
				$error=1;
				$error_msg="The project name \""+$newName+"\" is already in use.  Please choose a different name.";
			}
			else if ((!strcmp(strip($projectsList[$i+1]),strip($newPath)))&&($index!=$i))
			{
				$error=2;
				$error_msg="The project path \""+$newPath+"\" is already in use.  Please choose a different path.";
			}
		}
	}

	if (!$error)
	{
		if (!`filetest -d $newPath`)
		{
			if (`sysFile -md $newPath`)
				{
				string $msg="Directory \""+$newPath+"\" did not exist. It has been created."; 
				confirmDialog -title "New Directory Created" -bgc .9 .9 .9 -message $msg
				-button "Ok" -defaultButton "Ok";	
			}else{
				$error=5;
				$error_msg="Directory \""+$newPath+"\"could not be created.  Please try entering a different path." ;
			}
		}	
	}
	
	if (!$error)
	{
		if (!$mode)
		{
			int $initSize = size($projectsList);
			int $j=$initSize-2;
			int $done = 0;
			if ($initSize==0)
				$done=1;
				
			while (!$done)
			{
				if (strcmp($projectsList[$j],$newName)>0)
				{
					$projectsList[$j+2]=$projectsList[$j];
					$projectsList[$j+3]=$projectsList[$j+1];
					$j-=2;
					if ($j==-2)
						$done=1;
				}
				else 	
					$done=1;
					
			}
			if ($j<=($openPipeline_currentProjIndex*2))
			{
				$openPipeline_currentProjIndex++;
			}
			$projectsList[$j+2]=$newName;
			$projectsList[$j+3]=$newPath;
			openPipelineRewriteProjFile($projectsList);
		}else{
			$projectsList[$index]=$newName;
			$projectsList[$index+1]=$newPath;
			openPipelineRewriteProjFile($projectsList);
		}
	}else{
		confirmDialog -title "Edit Project Error" -bgc .9 .9 .9 -message $error_msg 
 		-button "Ok" -defaultButton "Ok";
	}
}


global proc openPipelineSetProjDialogPath(string $path, string $type)
{
	textField -e -tx $path pathTextField;	
}


global proc openPipelineNewProject()
{
	openPipelineProjDialogWindow(0,-1,"","");
}

	
global proc string openPipelineGetProjFile()
{
	global string $openPipeline_ntPath;
	global string $openPipeline_projList_nt;
	return $openPipeline_ntPath+$openPipeline_projList_nt;
}
