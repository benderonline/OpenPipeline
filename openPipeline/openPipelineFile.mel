//
// openPipeline Pipeline File Functions
//


global proc openPipelineMakeNewAssetTree(string $type, string $name)
{

	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
				
	string $scenePath = `openPipelineGetPath "scenes"`;
	string $component;
		
	switch($type)
	{
		case "assettype":
			openPipelineMakeNewAssetType($name);
			break;

		case "asset":
			openPipelineMakeNewAsset($libPath, $name);
			break;
			
		case "component":
//			while($name == "other...")
//			{
//				// pop up window
// 				string $result = `promptDialog 
// 					-title "Custom Component"
// 					-message "component name:"
// 					-button "create" -button "cancel"
// 					-defaultButton "create" -cancelButton "cancel"
// 					-dismissString "cancel"`;
// 
// 				if($result == "create")
// 				{
// 					$component = `promptDialog -query -text`;
// 					if($component == "")
// 					{
// 						$component = "other...";
// 					}
// 				}
//			}
			openPipelineMakeNewAssetComponent($libPath, $name);		
			break;
			
		case "sequence":
			openPipelineMakeNewSequence($scenePath, $name);
			break;
			
		case "shot":
			openPipelineMakeNewShot($scenePath, $name);
			break;

		case "shottype":
			$name = `optionMenuGrp -q -v assetComponentTypeMenu`;

			while($name == "other...")
			{
				// pop up window
 				string $result = `promptDialog 
 					-title "Custom Component"
 					-message "component name:"
 					-button "create" -button "cancel"
 					-defaultButton "create" -cancelButton "cancel"
 					-dismissString "cancel"`;
 
 				if($result == "create")
 				{
 					$name = `promptDialog -query -text`;
 					if($name == "")
 					{
 						$name = "other...";
 					}
 				}
			}
			openPipelineMakeNewShotType($scenePath, $name);		
			break;

		case "default":
			warning "openPipeline: Bad Asset Type";
			break;
	}
}


global proc string openPipelineMakeNewAssetType(string $name)
{
	string $libPath = `openPipelineGetPath "lib"`;
	string $assetPath = ($libPath + $name);
	if(`filetest -d ($assetPath)` == 0)
	{
		sysFile -makeDir ($assetPath);
	}else if(`filetest -d $assetPath` == 1){
		warning ("openPipeline: " + $name + " exists.\n");
		return $assetPath;
	}else{}

	sysFile -makeDir $assetPath;
	
	return $assetPath;
}


global proc string openPipelineMakeNewAsset(string $libPath, string $name)
{

	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;	
	global string $openPipeline_menuCurrentAssetComponent;
	
	$openPipeline_menuCurrentAsset = $name;
	$openPipeline_menuCurrentAssetComponent = "";
	
	string $assetPath = ($libPath + $name);
	if(`filetest -d ($assetPath)` == 0)
	{
		sysFile -makeDir ($assetPath);
	}else if(`filetest -d $assetPath` == 1){
		warning ("openPipeline: " + $name + " exists.\n");
		return $assetPath;
	}else{}

	sysFile -makeDir $assetPath;
	sysFile -makeDir ($assetPath + "/" + "workshop");
	sysFile -makeDir ($assetPath + "/" + "version");	
	sysFile -makeDir ($assetPath + "/" + "components");
	
	// asset notes
	sysFile -makeDir ($assetPath + "/" + "notes");
	$noteFile = ($assetPath + "/" + "notes" + "/" + $name + "_AssetNote.xml");
	
	//---Clear and Fix-----//
	// let Proc openPipeline_AssetNoteWriter writes the note
	openPipelineAssetNoteWriter "creation";
	
	return $assetPath;
}


global proc string openPipelineMakeNewAssetComponent(string $libPath, string $component)
{

	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetComponent = $component;

	string $assetPath = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $component);
	
	if(`filetest -d ($assetPath)` == 0)
	{
		sysFile -makeDir ($assetPath);
	}else if(`filetest -d $assetPath` == 1){
		warning ("openPipeline: " + $openPipeline_menuCurrentAsset + " exists.\n");
		return $assetPath;
	}else{}

	sysFile -makeDir $assetPath;
	sysFile -makeDir ($assetPath + "/" + "workshop");
	sysFile -makeDir ($assetPath + "/" + "version");	
			
	// asset notes
	sysFile -makeDir ($assetPath + "/" + "notes");
	$noteFile = ($assetPath + "/" + "notes" + "/" + $openPipeline_menuCurrentAsset + "_AssetNote.xml");
	
	//---Clear and Fix-----//
	// let Proc openPipeline_AssetNoteWriter writes the note
	openPipelineAssetNoteWriter "creation";

	return $assetPath;
}

global proc string openPipelineMakeNewSequence(string $scenePath, string $name)
{

	global string $openPipeline_menuCurrentSequence;

	string $sequencePath = ($scenePath + $name);

	if(`filetest -d ($sequencePath)` == 0)
	{
		sysFile -makeDir ($sequencePath);
	}else if(`filetest -d $sequencePath` == 1){
		warning ("openPipeline: " + $sequencePath + " exists.\n");
		return $sequencePath;
	}else{}

// temp!
$openPipeline_menuCurrentSequence = $name;

		
	return $sequencePath;
}


global proc string openPipelineMakeNewShot(string $scenePath, string $name)
{

	global string $openPipeline_menuCurrentSequence;
	global string $openPipeline_menuCurrentShot;
	
	string $shotPath = ($scenePath + $openPipeline_menuCurrentSequence + "/" + $name);

	if(`filetest -d ($shotPath)` == 0)
	{
		sysFile -makeDir ($shotPath);
	}else if(`filetest -d $shotPath` == 1){
		warning ("openPipeline: " + $shotPath + " exists.\n");
		return $shotPath;
	}else{}

	sysFile -makeDir $shotPath;
	sysFile -makeDir ($shotPath + "/" + "workshop");
	sysFile -makeDir ($shotPath + "/" + "version");	
			
	// asset notes
	sysFile -makeDir ($shotPath + "/" + "notes");
	$noteFile = ($shotPath + "/" + "notes" + "/" + $name + "_AssetNote.xml");
	
	//---Clear and Fix-----//
	// let Proc openPipeline_AssetNoteWriter writes the note
	openPipelineShotNoteWriter "creation";

// temp!
$openPipeline_menuCurrentShot = $name;
		
	return $shotPath;
}


global proc string openPipelineMakeNewShotType(string $scenePath, string $name)
{

	global string $openPipeline_menuCurrentSequence;
	global string $openPipeline_menuCurrentShot;

	string $shotTypePath = ($scenePath + $openPipeline_menuCurrentSequence + 
		"/" + $openPipeline_menuCurrentShot + "/components/" + $name);

	if(`filetest -d ($shotTypePath)` == 0)
	{
		sysFile -makeDir ($shotTypePath);
	}else if(`filetest -d $shotTypePath` == 1){
		warning ("openPipeline: " + $shotTypePath + " exists.\n");
		return $shotTypePath;
	}else{}

	sysFile -makeDir $shotTypePath;
	sysFile -makeDir ($shotTypePath + "/" + "workshop");
	sysFile -makeDir ($shotTypePath + "/" + "version");	
			
	// asset notes
	sysFile -makeDir ($shotTypePath + "/" + "notes");
	$noteFile = ($shotTypePath + "/" + "notes" + "/" + $name + "_AssetNote.xml");
	
	//---Clear and Fix-----//
	// let Proc openPipeline_AssetNoteWriter writes the note
	openPipelineShotNoteWriter "creation";
		
	return $shotTypePath;
}


global proc openPipelineOpenFile(string $openType)
{
	// query the asset state
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	openPipelineUpdateCurrentFileText($openType, "latest");
	
	openPipelineProcessAssetOpen $openType $openPipeline_menuCurrentAsset $openPipeline_menuCurrentAssetComponent;		
}


global proc openPipelineUpdateCurrentFileText(string $openType, string $version)
{
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	global string $openPipeline_currentOpenAsset;
	global string $openPipeline_currentOpenAssetComponent;
	global string $openPipeline_currentOpenAssetComponentString;

	$openPipeline_currentOpenAsset = $openPipeline_menuCurrentAsset;
	$openPipeline_currentOpenAssetComponent = $openPipeline_menuCurrentAssetComponent;
	$openPipeline_currentOpenAssetComponentString = 
				($openPipeline_currentOpenAsset + 
				" " + $openPipeline_currentOpenAssetComponent + 
				" " + $openType + " revision : " + $version);
	
	textFieldGrp -e 
		-text $openPipeline_currentOpenAssetComponentString 
		currentFileText;
}


global proc openPipelineImportFile(string $openType)
{
	// query the asset state
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetComponent;

	openPipelineProcessAssetImport $openType $openPipeline_menuCurrentAsset $openPipeline_menuCurrentAssetComponent;	
}


global proc openPipelineProcessAssetImport(string $openType, string $assetName, string $assetComponentName)
{
	switch($openType)
	{
		case "workshop":
			openPipelineImportWorkshop $assetName $assetComponentName;
			break;
		case "master":
			openPipelineImportMaster $assetName $assetComponentName;
			break;
	}
}


global proc int openPipelineImportWorkshop(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	string $workshop;
	string $workshopFile;
	int $workshopNum;

	if($assetComponentName == "")
	{
		$workshop = ($libPath + $assetName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_workshop_" + $workshopNum + ".mb");
	} else {
		$workshop = ($libPath + $assetName + "/components/" + $assetComponentName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_" + $assetComponentName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_" + $assetComponentName + "_workshop_" + $workshopNum + ".mb");
	}
	
	if(`filetest -r $workshopFile`)
	{
		file -import $workshopFile;
		print ("openPipeline: Imported Workshop: " + $workshopFile + "\n");
		return 1; // success
	}else{
		warning ("openPipeline: No Workshop File: " + $workshopFile + " Exists \n");
		return 0; // failure
	}
}


global proc int openPipelineImportMaster(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	string $masterFile;
	
	if($assetComponentName == "")
	{
		$masterFile = ($libPath + $assetName + "/" + $assetName + "_asset.mb");
	} else {
		$masterFile = ($libPath + $assetName + "/components/" + $assetComponentName + "/" + $assetName + "_" + $assetComponentName + ".mb");
	}

	if(`filetest -r $masterFile`)
	{
		file -import $masterFile;
		print ("openPipeline: Imported Master: " + $masterFile + "\n");
		return 1; // success
	}else{
		warning ("openPipeline: No Master File Exists In " + $masterFile + "\n");
		return 0; // failure
	}
}


global proc openPipelineProcessAssetOpen(string $openType, string $assetName, string $assetComponentName)
{
	switch($openType)
	{
		case "workshop":
			openPipelineOpenWorkshop $assetName $assetComponentName;
			break;
		case "master":
			openPipelineOpenMaster $assetName $assetComponentName;
			text -e -label "master" currentVersion;
			break;
	}
}


global proc int openPipelineOpenWorkshop(string $assetName, string $assetComponentName)
{

	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	string $workshop;
	string $workshopFile;
	int $workshopNum;

	if($assetComponentName == "")
	{
		$workshop = ($libPath + $assetName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_workshop_" + $workshopNum + ".mb");
	} else {
		$workshop = ($libPath + $assetName + "/components/" + $assetComponentName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_" + $assetComponentName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_" + $assetComponentName + "_workshop_" + $workshopNum + ".mb");
	}
	
	if(`filetest -r $workshopFile`)
	{
		NewScene;
		file -open $workshopFile;
		return 1; // success
	}else{
		warning ("openPipeline: No Workshop File Exists In: " + $workshop + " \n");
		return 0; // failure
	}
}


global proc int openPipelineOpenMaster(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	string $masterFile;
	string $selectedInventory;
	
	if($assetComponentName == "")
	{
		$masterFile = ($libPath + $assetName + "/" + $assetName + "_asset.mb");
		$selectedInventory = "assetInventory";
		
	} else {
		$masterFile = ($libPath + $assetName + "/components/" + $assetComponentName + "/" + $assetName + "_" + $assetComponentName + ".mb");
		$selectedInventory = "assetComponentInventory";
	}

	if(`filetest -r $masterFile`)
	{
		NewScene;
		file -open $masterFile;
		string $buttonSelected = `iconTextRadioCollection -q -sl $selectedInventory`;
		iconTextRadioButton -e -font "smallBoldLabelFont" $buttonSelected;
		return 1; // success

	}else{
		warning ("openPipeline: No Master File Exists In " + $masterFile + "\n");
		return 0; // failure
	}
}



global proc openPipelineSaveMasterFileWrapper()
{
	// query the ui for mastering steps
	
	
	// notes
	openPipelineAssetNoteWriter master; 

	// do required checks
	
	
	// finally save the master file
	openPipelineSaveFile master;
}


global proc openPipelineSaveFile(string $saveType)
{
	// query the asset state
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetComponent = `openPipelineGetAssetComponentSelected`;
	
	string $confirmText;
	if($openPipeline_menuCurrentAssetComponent == "")
	{
		$confirmText = ("Save " + $openPipeline_menuCurrentAsset + " " + $saveType + " file?");
	} else {
		
		$confirmText = ("Save " + $openPipeline_menuCurrentAsset + " : " + $openPipeline_menuCurrentAssetComponent + " " + $saveType + " file?"); 
	}
	
	if($saveType!="master")
	{
		string $response = `confirmDialog -title "Sure...?" -message $confirmText
			-button "Yes" -button "No" -defaultButton "Yes"
	 		-cancelButton "No" -dismissString "No"`;

		if($response == "No") return;
	}

	openPipelineProcessAssetSave $saveType $openPipeline_menuCurrentAsset $openPipeline_menuCurrentAssetComponent;
	
}


global proc openPipelineProcessAssetSave(string $saveType, string $assetName, string $assetComponentName)
{
	switch($saveType)
	{
		case "workshop":
			openPipelineSaveWorkshop $assetName $assetComponentName;
			break;
		case "master":
			openPipelineSaveWorkshop $assetName $assetComponentName;			
			openPipelineSaveMaster $assetName $assetComponentName;
			break;
	}
	openPipelineUI;
}


global proc openPipelineSaveWorkshop(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	string $scenePath = `openPipelineGetPath "scenes"`;

	string $workshop;
	string $workshopFiles[];
	int $workshopNum;
	string $destinationFile;

	if($assetComponentName == "")
	{
		$workshop = ($libPath + $assetName + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($assetName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)` + 1; 
		$destinationFile = ($workshop + $assetName + "_workshop_" + $workshopNum + ".mb");
	} else {	
		$workshop = ($libPath + $assetName + "/components/" + $assetComponentName + "/workshop/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($assetName + "_" + $assetComponentName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)` + 1; 
		$destinationFile = ($workshop + $assetName + "_" + $assetComponentName + "_workshop_" + $workshopNum + ".mb");
	}

	// save the current file to the master location
	file -rename $destinationFile;     
	file -save -type "mayaBinary";
}


global proc openPipelineSaveMaster(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");

	string $scenePath = `openPipelineGetPath "scenes"`;
	
	string $masterFile;
	string $versions;
	string $versionFiles[];
	int $versionNum;
	string $destinationFile;

	if($assetComponentName == "")
	{
		$masterFile = ($libPath + $assetName + "/" + $assetName + "_asset.mb");
		$versions = ($libPath + $assetName + "/version/");
		$versionFiles = `getFileList -folder $versions`;
		$versionNum = `size($versionFiles)`; 
		$destinationFile = ($versions + $assetName + "_version_" + $versionNum + ".mb");
		
	} else {	
		$masterFile = ($libPath + $assetName + "/components/" + $assetComponentName + "/" + $assetName + "_" + $assetComponentName + ".mb");
		$versions = ($libPath + $assetName + "/components/" + $assetComponentName + "/version/");
		$versionFiles = `getFileList -folder $versions`;
		$versionNum = `size($versionFiles)`; 
		$destinationFile = ($versions + $assetName + "_" + $assetComponentName + "_version_" + $versionNum + ".mb");
	}

	// copy current master to version dir
	string $copyCmd = ("copy " + $masterFile + " " + $destinationFile);
	string $copyCmd = ("substituteAllString(\"" + $copyCmd + "\", \"\/\", \"\\\\\")");
	string $cleanCmd = `eval($copyCmd)`;
	
	system($cleanCmd);

	// flatten the references to create a publishable master file
	openPipelineImportRefs;
	
	// save the current file to the master location
	file -rename $masterFile;     
	file -save -type "mayaBinary";

	// open the latest workshop (so no one actually works in the master!)
	openPipelineOpenFile("workshop");
	
	//after save master, change the current version in Revision Layout from whatever to master
//	text -e -label "master" currentVersion;
}


global proc openPipelineDeleteAsset()
{
	// query the asset state
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;
	global string $openPipeline_menuCurrentAssetComponent;

	$openPipeline_menuCurrentAssetComponent = `openPipelineGetAssetComponentSelected`;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	string $scenePath = `openPipelineGetPath "scenes"`;
	string $archivePath = `openPipelineGetPath "archive"`;
	
	sysFile -makeDir $archivePath;

	string $path, $destinationPath;

	if($openPipeline_menuCurrentAssetComponent == "")
	{
		$path = ($libPath + $openPipeline_menuCurrentAsset);
		$destinationPath = ($archivePath + $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetType + "_asset");
	} else {	
		$path = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent);
		$destinationPath = ($archivePath + $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetType + "_" + $openPipeline_menuCurrentAssetComponent);
	}
	
	// copy current master to version dir
	string $copyCmd = ("move " + $path + " " + $destinationPath);
	string $copyCmd = ("substituteAllString(\"" + $copyCmd + "\", \"\/\", \"\\\\\")");
	string $cleanCmd = `eval($copyCmd)`;
	
	system($cleanCmd);
	
	openPipelineUI;
}


global proc openPipelineReferenceFile(string $openType)
{
	// query the asset state
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetComponent;

	openPipelineProcessAssetReference $openType $openPipeline_menuCurrentAsset $openPipeline_menuCurrentAssetComponent;	
}


global proc openPipelineProcessAssetReference(string $openType, string $assetName, string $assetComponentName)
{
	switch($openType)
	{
		case "workshop":
			openPipelineReferenceWorkshop $assetName $assetComponentName;
			break;
		case "master":
			openPipelineReferenceMaster $assetName $assetComponentName;
			break;
	}
}


global proc int openPipelineReferenceWorkshop(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");


	string $workshop;
	string $workshopFile;
	int $workshopNum;

	if($assetComponentName == "")
	{
		$workshop = ($libPath + $assetName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_workshop_" + $workshopNum + ".mb");
	} else {
		$workshop = ($libPath + $assetName + "/components/" + $assetComponentName + "/workshop/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ($assetName + "_" + $assetComponentName + "_workshop_*.mb")`;
		$workshopNum = `size($workshopFiles)`; 
		$workshopFile = ($workshop + $assetName + "_" + $assetComponentName + "_workshop_" + $workshopNum + ".mb");
	}
	
	if(`filetest -r $workshopFile`)
	{
		file -reference $workshopFile;
		print ("openPipeline: Referenced Workshop: " + $workshopFile + "\n");
		return 1; // success
	}else{
		warning ("openPipeline: No Workshop File: " + $workshopFile + " Exists \n");
		return 0; // failure
	}
}


global proc int openPipelineReferenceMaster(string $assetName, string $assetComponentName)
{
	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	string $masterFile;
	
	if($assetComponentName == "")
	{
		$masterFile = ($libPath + $assetName + "/" + $assetName + "_asset.mb");
	} else {
		$masterFile = ($libPath + $assetName + "/components/" + $assetComponentName + "/" + $assetName + "_" + $assetComponentName + ".mb");
	}

	if(`filetest -r $masterFile`)
	{
		file -reference $masterFile;
		print ("openPipeline: Referenced Master: " + $masterFile + "\n");
		return 1; // success
	}else{
		warning ("openPipeline: No Master File Exists In " + $masterFile + "\n");
		return 0; // failure
	}
}


global proc int openPipelineReviveAsset()
{
	global string $openPipeline_menuCurrentAsset;	
	global string $openPipeline_menuCurrentAssetComponent;

	global string $openPipeline_menuCurrentAssetType;

	string $libPath = `openPipelineGetPath "lib"`;
	$libPath = ($libPath + $openPipeline_menuCurrentAssetType + "/");
	
	int $versionNumber = `optionMenu -q -v reviveVerMenu`;
	string $reviveTypeMenu = `optionMenu -q -value reviveTypeMenu`;
	string $reviveFile;
	string $workshop;
	string $version;

	if($openPipeline_menuCurrentAssetComponent == "")
	{
		if($reviveTypeMenu == "workshop")
		{
			$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/workshop/");
			$reviveFile = ($workshop + $openPipeline_menuCurrentAsset + "_workshop_" + $versionNumber + ".mb");
		}
		else if($reviveTypeMenu == "master")
		{
			$version = ($libPath + $openPipeline_menuCurrentAsset + "/version/");
			$reviveFile = ($version + $openPipeline_menuCurrentAsset + "_version_" + $versionNumber + ".mb");
		}
	} else {
		if($reviveTypeMenu == "workshop")
		{	
			$workshop = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/workshop/");
			$reviveFile = ($workshop + $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_workshop_" + $versionNumber + ".mb");
		}
		else if($reviveTypeMenu == "master")
		{
			$version = ($libPath + $openPipeline_menuCurrentAsset + "/components/" + $openPipeline_menuCurrentAssetComponent + "/version/");
			$reviveFile = ($version + $openPipeline_menuCurrentAsset + "_" + $openPipeline_menuCurrentAssetComponent + "_version_" + $versionNumber + ".mb");
		}
	}

	if(`filetest -r $reviveFile`)
	{
		NewScene;
		file -open $reviveFile;

		openPipelineUpdateCurrentFileText($reviveTypeMenu, $versionNumber);

		return 1; // success
	}else{
		warning ("openPipeline: No Version " + $versionNumber + " Found\n");
		return 0; // failure
	}
}
