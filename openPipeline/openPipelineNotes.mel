global proc openPipelineLoadAssetNote()
{
	global string $openPipeline_menuCurrentAsset;
	global string $openPipeline_menuCurrentAssetType;		
	global string $openPipeline_menuCurrentAssetComponent;	

	string $notePath = `openPipelineGetPath "note"`;

	if(`filetest -f $notePath` == 0)
	{
		openPipelineAssetNoteWriter "missing";
	}

//	string $assetNoteTextArray[] = `openPipelineReadTxt $notePath "everything"`;
	string $assetNoteTextArray[] = `openPipelineReadXML $notePath`;
	string $assetNoteText = stringArrayToString($assetNoteTextArray, "");
		
	scrollField -edit -text $assetNoteText noteField;
}

// parses the specified XML file
global proc string openpipelineLoadXML(string $line)
{
	string $tag;
	string $content;
	string $tagAndContent;

	// we need to keep track of 


	// cull leading white space escape quotes
	$line = `strip($line)`; // may not be needed
	$line = `encodeString($line)`;	

	// search for header
	int $headerMatch = `gmatch $line "*?xml*"`;
	if($headerMatch == 1) return $tagAndContent;

	// match for the tag
	$tag = `match "<[a-zA-Z0-9 \"=\\]*>" $line`;
	$tag = substituteAllString($tag, "<", "");	
	$tag = substituteAllString($tag, ">", "");
	
	// everything else is the content
	$content = `match ">[:/a-zA-Z0-9 \"=\\]*<" $line`;
	$content = substituteAllString($content, "<", "");	
	$content = substituteAllString($content, ">", "");

	// check for bum data
	if(($tag == "") && ($content =="")) return $tagAndContent;

	// finally return tag and content
	$tagAndContent = ($tag + ": " + $content);
	print ($tagAndContent+"\n");
	return $tagAndContent;
}


global proc openPipelineAssetNoteWriter(string $inputMode)
{

	global string $openPipeline_userName;	
	
	//boolean value for preventing the user entering nothing while adding comment
	int $emptyCommentAdded = 0;	
	
	string $eventContent;
	string $commentContent;
	
	//get the date and time
	string $dateNow = `system("date /t")`;
	string $timeNow = `system("time /t")`;
	string $dateStrip = `strip $dateNow`;
	string $timeStrip = `strip $timeNow`;
		
	$dateStrip = `match "[A-Za-z][A-Za-z][A-Za-z] [0-9]+/[0-9]+/[0-9]+" $dateStrip`;
	$timeStrip = `match "[0-9]+:[0-9]+ [AP]M" $timeStrip`;

	string $time_Date = ("Time: " + $timeStrip + "   Date: " + $dateStrip);	
	string $proj_Path = `openPipelineGetPath "proj"`;
	
	if($inputMode=="creation")
	{	
		string $creationPath = `openPipelineGetPath "newnote"`;
		
		$fileId=`fopen $creationPath "w"`;
		fprint $fileId "Asset Created: ";
 		fprint $fileId $time_Date;
		fprint $fileId "\n";

 		fclose $fileId;

 		openPipelineFilePermisson "+R" $creationPath;

	}else if($inputMode == "missing")
	{
		string $creationPath = `openPipelineGetPath "note"`;			
		$fileId=`fopen $creationPath "w"`;
		fprint $fileId "Asset note missing: recreated: ";
 		fprint $fileId $time_Date;
 		fclose $fileId;
 		openPipelineFilePermisson "+R" $creationPath;

	}else{
		switch($inputMode)
		{	
			case "master":
				string $commentAdd = `textField -q -text masterCommentField`;
				$eventContent = "\nEVENT: File mastered by " + $openPipeline_userName + ".";
				string $tempComment = `strip $commentAdd`;
				if(size($tempComment)>0)
				{
					$commentContent = ("\nCOMMENT: " + $commentAdd);	
				}else{
					$commentContent = "";	
				}
//			deleteUI masterFileUI;
			break;
		
			case "add":
				$eventContent = ("\nEVENT: comment added by "+ $openPipeline_userName+". version: ");
				string $commentAdd = `textField -q -text commentField`;	
				$commentContent = ("\nCOMMENT: " + $commentAdd);
				
				//get rid of space from commentField and size it.
				//if nothing is there, trun the $emptyCommentAdded into 1 
				string $tempComment = `strip $commentAdd`;
				if(size($tempComment)==0)
				{
					$emptyCommentAdded = 1;
				}else
				{
					$emptyCommentAdded = 0;
				}
			break;
		}
			
		//do follow if it's not added empty comment 
		//or it's file mastered
		if(!$emptyCommentAdded)
		{		

			string $notePath = `openPipelineGetPath "note"`;
			int $fileId;
			
			if(`filetest -f $notePath`)
			{
				openPipelineFilePermisson "-R" $notePath;
				$fileId=`fopen $notePath "a"`;
			}else{
				$fileId=`fopen $notePath "w"`;
			}
						
			fprint $fileId "\n";
		 	fprint $fileId $time_Date;
		 	fprint $fileId $eventContent;
		 	fprint $fileId $commentContent;
		 	fprint $fileId "\n";
		 	fclose $fileId;
		 	
		 	openPipelineFilePermisson "+R" $notePath;
		 	
		 	//reload the note
		 	openPipelineLoadAssetNote;
		}
	}
}


global proc openPipelineShotNoteWriter(string $inputMode)
{
	
// nothing.
	
	
}


//
//change the file permission in Window
//
// + set
// - clean
// R read-Only
// H Hidden
//
global proc openPipelineFilePermisson(string $inputMode, string $input_Path)
{
	string $exeCommand = "ATTRIB " + $inputMode + " " + $input_Path;
	system($exeCommand);
}

//
//This Proc reads TXT file.
//It will return an string[] without the empty lines and the comments.
//
global proc string[] openPipelineReadTxt(string $inputPath, string $inputMode)
{
	int $i=0;
	string $outputString[]={};
		
	if(`filetest -r $inputPath`)
	{
		$fileId = `fopen $inputPath "r"`;
		string $nextLine = `fgetline $fileId`;
		
		while(size($nextLine)>0)
		{
			switch($inputMode)
			{
				case "clean":
					string $stripNextLine = `strip $nextLine`;
					if(size($stripNextLine)>0 && startString($stripNextLine, 2)!="//" )
					{
						$outputString[$i] = $nextLine;
						$i++;
					}
					$nextLine = `fgetline $fileId`;				
					break;
					
				case "everything":
					$outputString[$i] = $nextLine;
					$i++;
					$nextLine = `fgetline $fileId`;
					break;
			}
		}
		fclose $fileId;		
	}else{
		warning ("No file exists in " + $inputPath);
	}
	return $outputString;
}

global proc string[] openPipelineReadXML(string $inputPath)
{
	int $i=0;
	string $outputString[];
		
	if(`filetest -r $inputPath`)
	{
		$fileId = `fopen $inputPath "r"`;
		string $nextLine = `fgetline $fileId`;
		
		while(size($nextLine)>0)
		{
			$outputString[$i] = openpipelineLoadXML($nextLine);
			//$outputString[$i] = $nextLine;
			$i++;
			$nextLine = `fgetline $fileId`;
		}
		fclose $fileId;		
	}else{
		warning ("No file exists in " + $inputPath);
	}
	return $outputString;
}