//
// openPipeline File Functions
//

//*** creates a new Asset Type
global proc string openPipelineNewAssetTypeProcess(string $name)
{
	string $libPath = `optionVar -q "op_libPath"`;
	string $assetTypePath = ($libPath + $name);
	if(`filetest -d ($assetTypePath)` == 0)
	{
		sysFile -makeDir ($assetTypePath);
	}
	else if(`filetest -d $assetTypePath` == 1)
	{
		confirmDialog -title "openPipeline Error" -message ("Asset Type "+$name+" already exists!")
 				-button "OK" -defaultButton "OK";
		return $assetTypePath;
	}

	
	return $assetTypePath;
}

//*** creates a new Sequence
global proc string openPipelineNewSequenceProcess(string $name)
{
	string $shotPath = `optionVar -q "op_shotPath"`;
	string $sequencePath = ($shotPath + $name);
	if(`filetest -d ($sequencePath)` == 0)
	{
		sysFile -makeDir ($sequencePath);
	}
	else
	{
		confirmDialog -title "openPipeline Error" -message ("Sequence "+$name+" already exists!")
 				-button "OK" -defaultButton "OK";
		return $sequencePath;
	}
	return $sequencePath;
}

//*** creates a new Asset
global proc string openPipelineNewAssetProcess(string $assetName)
{
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_assetTypeScrollList`;
	string $assetTypes[] = `optionVar -q "op_assetTypes"`;
	string $assetTypePath = $assetTypes[$indexSelected[0]-1];
	
	string $assetPath = $assetTypePath + $assetName;

	if (`filetest -d $assetPath`)
	{
		$error+=("asset \""+$assetName+"\" already exists!");
	}
	
	if($error != "")
	{
		confirmDialog -title "openPipeline Error" -message $error
 			-button "OK" -defaultButton "OK";
 	}else{
		string $wName = `optionVar -q "op_workshopName"`;
		sysFile -makeDir $assetPath;
		sysFile -makeDir ($assetPath + "/" + $wName);
		sysFile -makeDir ($assetPath + "/" + "version");	
		sysFile -makeDir ($assetPath + "/" + "components");
		// asset notes
		sysFile -makeDir ($assetPath + "/" + "notes");
		optionVar -sv "op_creationPath" ($assetPath+"/");
		optionVar -sv "op_creationType" "asset";
		openPipelineNoteWriter "creation";
		openPipelineCreateDescription($assetPath+"/");
 	}
	return $assetPath;
}

//*** creates a new Component
global proc string openPipelineNewComponentProcess(string $componentName)
{
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_assetScrollList`;
	string $assets[] = `optionVar -q "op_assets"`;
	string $assetPath = $assets[$indexSelected[0]-1];
	string $componentPath = $assetPath + "components/" + $componentName;
	
	if (`filetest -d $componentPath`)
	{
		$error+=("component \""+$componentName+"\" already exists!");
	}
	
	if($error != "")
	{
		confirmDialog -title "openPipeline Error" -message $error
 			-button "OK" -defaultButton "OK";
	}else{
		string $wName = `optionVar -q "op_workshopName"`;
		sysFile -makeDir $componentPath;
		sysFile -makeDir ($componentPath + "/" + $wName);
		sysFile -makeDir ($componentPath + "/" + "version");	
		sysFile -makeDir ($componentPath + "/" + "notes");	
		optionVar -sv "op_creationPath" ($componentPath+"/");
		optionVar -sv "op_creationType" "component";
		openPipelineNoteWriter "creation";
		openPipelineCreateDescription($componentPath+"/");
	}
	return $componentPath;
}

//*** creates a new Shot Component
global proc string openPipelineNewShotComponentProcess(string $componentName)
{
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_shotScrollList`;
	string $shots[] = `optionVar -q "op_shots"`;
	string $shotPath = $shots[$indexSelected[0]-1];
	
	string $componentPath = $shotPath + "components/" + $componentName;
	
	if (`filetest -d $componentPath`)
	{
		$error+=("component \""+$componentName+"\" already exists!");
	}
	
	if($error != "")
	{
		confirmDialog -title "openPipeline Error" -message $error
 			-button "OK" -defaultButton "OK";
	}else{
		string $wName = `optionVar -q "op_workshopName"`;
		sysFile -makeDir $componentPath;
		sysFile -makeDir ($componentPath + "/" + $wName);
		sysFile -makeDir ($componentPath + "/" + "version");	
		sysFile -makeDir ($componentPath + "/" + "notes");	
		optionVar -sv "op_creationPath" ($componentPath+"/");
		optionVar -sv "op_creationType" "component";
		openPipelineNoteWriter "creation";
		openPipelineCreateDescription($componentPath+"/");
	}
	return $componentPath;
}

//*** creates a new Shot
global proc string openPipelineNewShotProcess(string $shotName)
{
	string $error = "";
	int $indexSelected[] = `textScrollList -q -sii op_sequenceScrollList`;
	string $sequences[] = `optionVar -q "op_sequences"`;
	string $sequencePath = $sequences[$indexSelected[0]-1];
	
	string $shotPath = $sequencePath + $shotName;

	if (`filetest -d $shotPath`)
	{
		$error+=("shot \""+$shotName+"\" already exists!");
	}
	
	if($error != "")
	{
		confirmDialog -title "openPipeline Error" -message $error
 			-button "OK" -defaultButton "OK";
 	}else{
		string $wName = `optionVar -q "op_workshopName"`;
		sysFile -makeDir $shotPath;
		sysFile -makeDir ($shotPath + "/" + $wName);
		sysFile -makeDir ($shotPath + "/" + "version");	
		sysFile -makeDir ($shotPath + "/" + "components");
		// asset notes
		sysFile -makeDir ($shotPath + "/" + "notes");
		optionVar -sv "op_creationPath" ($shotPath+"/");
		optionVar -sv "op_creationType" "shot";
		openPipelineNoteWriter "creation";
		openPipelineCreateDescription($shotPath+"/");
 	}
	return $shotPath;
}

//*** performs an action on an Asset (open, import, or reference)
//      $type - 'master' or 'workshop'
//      $versionOffset - for opening previous workshop versions. 0 means latest version
//      $action - action to perform  ('open', 'import', or 'reference')
//      $currentlyOpen - 1 to perform action on currently open Asset, 0 for currently selected Asset
global proc int openPipelineAssetAction(string $type, int $versionOffset, string $action, int $currentlyOpen)
{
	string $wName = `optionVar -q "op_workshopName"`;
	string $selectedAssetPath;
	if ($currentlyOpen)
		$selectedAssetPath = `optionVar -q "op_currOpenPath"`;
	else
		$selectedAssetPath = openPipelineGetSelectedAsset();
	string $assetName = basename($selectedAssetPath,"");
	int $version = 0;
	string $file = "";
	string $currOpen = `optionVar -q op_currOpenPath`;
	if (($action=="open")&&(`file -q -mf`)&&(size($currOpen)))
	{
		string $confirm;
		$confirm = `confirmDialog -t "openPipeline" -m ("Would you like to Save "+$wName+" before editing Asset?") -b "Save" -b "Don't Save" -b "Cancel" -db "Save"`;
		if ($confirm==("Save"))
			openPipelineSaveWorkshop;
		else if ($confirm=="Cancel")
			return 1;
	}
	if ($type=="workshop")
	{
		
		string $workshopFiles[] = openPipelineGetWorkshops($selectedAssetPath);
		int $workshopNum = `size($workshopFiles)`;
		if ($workshopNum)
			{
			$file = $workshopFiles[$workshopNum-1-$versionOffset];
			$version = openPipelineGetVersionFromFile($file);
			}
	}
	else if ($type=="master")
	{
		string $ext = `optionVar -q "op_masterFormat"`;
		$file = $selectedAssetPath + $assetName + "_asset." + $ext;
	}
	
	int $fileExists = `filetest -r $file`;

	if ($action=="open")
	{
		if ($fileExists)
		{
			file -f -open $file;
		}
		else if ($type=="workshop")
		{
			string $choice = `confirmDialog -t "Edit Asset" -m "You are about to edit an asset for the first time. Would you like to start with an new scene, or the currently open scene?" -b "New Scene" -b "Current Scene" -b "Cancel" -cb "Cancel" -db "Current Shot"`;
			if ($choice=="New Shot")
				file -f -new;
			else if ($choice=="Cancel")
				return 1;
		}
		optionVar -sv "op_currOpenPath" $selectedAssetPath;
		optionVar -sv "op_currOpenType" $type;
		optionVar -iv "op_currOpenVersion" $version;
		optionVar -sv "op_currOpenCategory" "asset";
		openPipelineAssetTypeSelected(1);
		openPipelineUpdateCurrentlyOpen();
		return 1; // success
	}
	else if (($action=="import")&&($fileExists))
	{
		file -import -ra true -rdn -namespace $assetName -pr   $file;
		return 1; // success
	}
	else if (($action=="reference")&&($fileExists))
	{
		file -reference -gl   -shd "renderLayersByName" -namespace $assetName -options "v=0;p=17" $file;
		return 1; // success
	}
		
	else
	{
		warning ("openPipeline: No " + $type +" File Exists In: " + $selectedAssetPath + " \n");
		return 0; // failure
	}
		
}
//*** performs an action on a Component (open, import, or reference)
//      $type - 'master' or 'workshop'
//      $versionOffset - for opening previous workshop versions. 0 means latest version
//      $action - action to perform  ('open', 'import', or 'reference')
//      $currentlyOpen - 1 to perform action on currently open Component, 0 for currently selected Component
global proc int openPipelineComponentAction(string $type, int $versionOffset, string $action, int $currentlyOpen)
{ 
	string $wName = `optionVar -q "op_workshopName"`;
	string $selectedComponentPath;
	if ($currentlyOpen)
		$selectedComponentPath = `optionVar -q "op_currOpenPath"`;
	else
		$selectedComponentPath = openPipelineGetSelectedComponent();
	string $componentName = openPipelineGetFolderFromPath($selectedComponentPath,0);
	string $assetName = openPipelineGetFolderFromPath($selectedComponentPath,2);
	int $version = 0;
	string $file;
	string $currOpen = `optionVar -q op_currOpenPath`;
	if (($action=="open")&&(`file -q -mf`)&&(size($currOpen)))
	{
		string $confirm;
		$confirm = `confirmDialog -t "openPipeline" -m ("Would you like to Save "+$wName+" before editing Component?") -b "Save" -b "Don't Save" -b "Cancel" -db "Save"`;
		if ($confirm=="Save")
			openPipelineSaveWorkshop;
		else if ($confirm=="Cancel")
			return 1;
	}
	if ($type=="workshop")
	{
		string $workshopFiles[] = openPipelineGetWorkshops($selectedComponentPath);
		int $workshopNum = `size($workshopFiles)`;
		if ($workshopNum)
		{
			$file = $workshopFiles[$workshopNum-1-$versionOffset];
			$version = openPipelineGetVersionFromFile($file);
		}
	}
	else if ($type=="master")
	{
		string $ext = `optionVar -q "op_masterFormat"`;
		$file = $selectedComponentPath + $assetName + "_" + $componentName + "." + $ext;
	}
	int $fileExists = `filetest -r $file`;
	if ($action=="open")
	{
		if ($fileExists)
		{
			file -f -open $file;
		}
		else if ($type=="workshop")
		{
			string $choice = `confirmDialog -t "Edit Component" -m ("You are about to edit a component with no existing "+$wName+"s.\nWould you like to start with an new scene, or the currently open scene?") -b "New Scene" -b "Current Scene" -b "Cancel" -cb "Cancel" -db "Current Shot"`;
			if ($choice=="New Shot")
				file -f -new;
			else if ($choice=="Cancel")
				return 1;
		}
		optionVar -sv "op_currOpenPath" $selectedComponentPath;
		optionVar -sv "op_currOpenType" $type;
		optionVar -iv "op_currOpenVersion" $version;
		optionVar -sv "op_currOpenCategory" "component";
		openPipelineAssetTypeSelected(1);
		openPipelineUpdateCurrentlyOpen();
		return 1; // success
	}

	else if (($action=="import")&&($fileExists))
	{
		file -import -ra true -rdn -namespace $componentName -pr   $file;
		return 1; // success
	}
	else if (($action=="reference")&&($fileExists))
	{
		file -reference -gl   -shd "renderLayersByName" -namespace $componentName -options "v=0;p=17" $file;
		return 1; // success
	}
	else
	{
		warning ("openPipeline: No " + $type +" File Exists In: " + $selectedComponentPath + " \n");
		return 0; // failure
	}
	
}

//*** performs an action on an Shot (open, import, or reference)
//      $type - 'master' or 'workshop'
//      $versionOffset - for opening previous workshop versions. 0 means latest version
//      $action - action to perform  ('open', 'import', or 'reference')
//      $currentlyOpen - 1 to perform action on currently open Shot, 0 for currently selected Shot
global proc int openPipelineShotAction(string $type, int $versionOffset, string $action, int $currentlyOpen)
{
	string $wName = `optionVar -q "op_workshopName"`;
	string $selectedShotPath;
	if ($currentlyOpen)
	{
		$selectedShotPath = `optionVar -q "op_currOpenPath"`;
	}
	else
	{
		$selectedShotPath = openPipelineGetSelectedShot();
	}
	string $shotName = basename($selectedShotPath,"");
	int $version = 0;
	string $file;
	string $currOpen = `optionVar -q op_currOpenPath`;
	if (($action=="open")&&(`file -q -mf`)&&(size($currOpen)))
	{
		string $confirm;
		$confirm = `confirmDialog -t "openPipeline" -m "Would you like to Save Workshop before editing Shot?" -b "Save Workshop" -b "Don't Save" -b "Cancel" -db "Save Workshop"`;
		if ($confirm=="Save Workshop")
			openPipelineSaveWorkshop;
		else if ($confirm=="Cancel")
			return 1;
	}
	
	if ($type=="workshop")
	{
		string $ext = `optionVar -q "op_workshopFormat"`;
		string $workshopPath = ($selectedShotPath + $wName +"/");
		string $workshopFiles[] = `getFileList -folder $workshopPath -filespec ($shotName + "_" + $wName + "_*." + $ext)`;
		$workshopFiles = sort($workshopFiles);
		int $workshopNum = `size($workshopFiles)`; 
		if ($workshopNum)
		{
			$file = ($workshopPath + $workshopFiles[$workshopNum-1-$versionOffset]);
			$version = openPipelineGetVersionFromFile($file);
		}
	}else if ($type=="master")
	{
		string $ext = `optionVar -q "op_masterFormat"`;
		$file = $selectedShotPath + $shotName + "_shot." + $ext;
	}
	
	int $fileExists = `filetest -r $file`;
	if ($action=="open")
	{
		if ($fileExists)
		{
			file -f -open $file;
		}
		else if ($type=="workshop")
		{
			string $choice = `confirmDialog -t "Edit Shot" -m ("You are about to edit a shot with no existing " + $wName + ".\nWould you like to start with an new scene, or the currently open scene?") -b "New Scene" -b "Current Scene" -b "Cancel" -cb "Cancel" -db "Current Shot"`;
			if ($choice=="New Shot")
			{
				file -f -new;
			}else if ($choice=="Cancel"){
				return 1;
			}
		}
		optionVar -sv "op_currOpenPath" $selectedShotPath;
		optionVar -sv "op_currOpenType" $type;
		optionVar -iv "op_currOpenVersion" $version;
		optionVar -sv "op_currOpenCategory" "shot";
		openPipelineUpdateShotList(1);
		openPipelineUpdateCurrentlyOpen();
		return 1; // success
	}
	else if (($action=="import")&&($fileExists))
	{
		string $namespace;
		$namespace = $shotName;
		if (!isValidString($shotName, "([a-zA-Z]+)([a-zA-Z0-9_])*"))
			$namespace = ("shot_"+$shotName);
		
		file -import -ra true -rdn -namespace $namespace -pr $file;
		return 1; // success
	}
	else if (($action=="reference")&&($fileExists))
	{
		string $namespace;
		$namespace = $shotName;
		if (!isValidString($shotName, "([a-zA-Z]+)([a-zA-Z0-9_])*"))
			$namespace = ("shot_"+$shotName);
		file -reference -gl  -shd "renderLayersByName" -namespace $namespace -options "v=0;p=17" $file;
		return 1; // success
	}else{
		warning ("openPipeline: No " + $type +" File Exists In: " + $selectedShotPath + " \n");
		return 0; // failure
	}
}

//*** performs an action on a Shot Component (open, import, or reference)
//      $type - 'master' or 'workshop'
//      $versionOffset - for opening previous workshop versions. 0 means latest version
//      $action - action to perform  ('open', 'import', or 'reference')
//      $currentlyOpen - 1 to perform action on currently open Component, 0 for currently selected Component
global proc int openPipelineShotComponentAction(string $type, int $versionOffset, string $action, int $currentlyOpen)
{ 
	string $wName = `optionVar -q "op_workshopName"`;
	string $selectedComponentPath;
	if ($currentlyOpen)
		$selectedComponentPath = `optionVar -q "op_currOpenPath"`;
	else
		$selectedComponentPath = openPipelineGetSelectedShotComponent();
	string $componentName = openPipelineGetFolderFromPath($selectedComponentPath,0);
	string $shotName = openPipelineGetFolderFromPath($selectedComponentPath,2);
	int $version = 0;
	string $file;
	string $currOpen = `optionVar -q op_currOpenPath`;
	if (($action=="open")&&(`file -q -mf`)&&(size($currOpen)))
	{
		string $confirm;
		$confirm = `confirmDialog -t "openPipeline" -m ("Would you like to Save "+$wName+" before editing Component?") -b "Save" -b "Don't Save" -b "Cancel" -db "Save"`;
		if ($confirm=="Save")
			openPipelineSaveWorkshop;
		else if ($confirm=="Cancel")
			return 1;
	}
	if ($type=="workshop")
	{
		string $workshopFiles[] = openPipelineGetWorkshops($selectedComponentPath);
		int $workshopNum = `size($workshopFiles)`;
		if ($workshopNum)
		{
			$file = $workshopFiles[$workshopNum-1-$versionOffset];
			$version = openPipelineGetVersionFromFile($file);
		}
	}
	else if ($type=="master")
	{
		string $ext = `optionVar -q "op_masterFormat"`;
		$file = $selectedComponentPath + $shotName + "_" + $componentName + "." + $ext;
	}
	int $fileExists = `filetest -r $file`;
	if ($action=="open")
	{
		if ($fileExists)
		{
			file -f -open $file;
		}
		else if ($type=="workshop")
		{
			string $choice = `confirmDialog -t "Edit Component" -m ("You are about to edit a component with no existing "+$wName+"s.\nWould you like to start with an new scene, or the currently open scene?") -b "New Scene" -b "Current Scene" -b "Cancel" -cb "Cancel" -db "Current Shot"`;
			if ($choice=="New Shot")
				file -f -new;
			else if ($choice=="Cancel")
				return 1;
		}
		optionVar -sv "op_currOpenPath" $selectedComponentPath;
		optionVar -sv "op_currOpenType" $type;
		optionVar -iv "op_currOpenVersion" $version;
		optionVar -sv "op_currOpenCategory" "shotComponent";
		openPipelineUpdateShotList 1;
		openPipelineUpdateCurrentlyOpen();
		return 1; // success
	}

	else if (($action=="import")&&($fileExists))
	{
		file -import -ra true -rdn -namespace $componentName -pr   $file;
		return 1; // success
	}
	else if (($action=="reference")&&($fileExists))
	{
		file -reference -gl   -shd "renderLayersByName" -namespace $componentName -options "v=0;p=17" $file;
		return 1; // success
	}
	else
	{
		warning ("openPipeline: No " + $type +" File Exists In: " + $selectedComponentPath + " \n");
		return 0; // failure
	}
	
}

//*** performs an action on an Asset in the Shot Management tab (import, or reference)
//      $action - action to perform  ('import' or 'reference')
global proc int openPipelineShotAssetAction(string $action)
{
	string $assetPath = openPipelineGetSelectedShotAsset();
	string $assetName = basename($assetPath,"");
	if (openPipelineAssetHasMaster($assetPath))
	{
		string $ext = `optionVar -q "op_masterFormat"`;
		string $file = $assetPath + $assetName + "_asset." + $ext;
		if ($action=="import")
		{
			file -import -ra true -rdn -namespace $assetName -pr   $file;
		}else if ($action=="reference"){
			file -reference -gl   -shd "renderLayersByName" -namespace $assetName -options "v=0;p=17" $file;
		}else{
			error("invalid action passed into `openPipelineShotAssetAction` procedure");
			return 0;
		}
	}else{
		error("Selected Asset didn't have master!");
		return 0;
	}
	return 1;
}

//*** saves the currently open Asset, Component, Shot or Shot Component
//          $saveType - 'workshop' or 'master'
//
//      this procedure will: 
//          -call "openPipelineSaveWorkshop" and/or "openPipelineSaveMaster" for actual file operations
//          -call "openPipelineAssetNoteWriter" for updating the appropriate note file
//          -call "openPipelineLoadCurrentAssetNote" for displaying the updated notes
//          -call "openPipeline____Action" to open the file which was just saved
//
global proc openPipelineProcessAssetSave(string $saveType)
{
	string $currCat = `optionVar -q "op_currOpenCategory"`;

	switch($saveType)
	{
		case "workshop":
			openPipelineSaveWorkshop;
			openPipelineNoteWriter workshop; 
			break;
		case "master":
			openPipelineSaveWorkshop;			
			openPipelineSaveMaster;
			openPipelineNoteWriter master;
			break;
	}

	int $openMaster = 0;
	
	if(`checkBox -q -exists masterOpenMasterBox`)
		$openMaster = `checkBox -q -v masterOpenMasterBox`;

	if(($saveType == "master")&&($openMaster == 1))
	{
		if ($currCat=="asset")
			openPipelineAssetAction master 0 open 1;	
		else if ($currCat=="component")
			openPipelineComponentAction master 0 open 1;	
		else if ($currCat=="shot")
			openPipelineShotAction master 0 open 1;	
		else if ($currCat=="shotComponent")
			openPipelineShotComponentAction master 0 open 1;	
		else
			error("openPipelineProcessAssetSave error: invalid category:"+$currCat);		
	}else{
		if ($currCat=="asset")
			openPipelineAssetAction workshop 0 open 1;	
		else if ($currCat=="component")
			openPipelineComponentAction workshop 0 open 1;	
		else if ($currCat=="shot")
			openPipelineShotAction workshop 0 open 1;	
		else if ($currCat=="shotComponent")
			openPipelineShotComponentAction workshop 0 open 1;	
		else
			error("openPipelineProcessAssetSave error: invalid category:"+$currCat);
	}
}

//*** Saves a workshop for the currently open asset / component / shot / shot component
global proc openPipelineSaveWorkshop()
{
  string $wName = `optionVar -q "op_workshopName"`;
	string $ext = `optionVar -q "op_workshopFormat"`;
	
	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currType = `optionVar -q "op_currOpenType"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	int $currVersion = `optionVar -q "op_currOpenVersion"`;

	string $workshop;
	string $workshopFiles[];
	int $numWorkshops;
	string $destinationFile;
	int $latestWorkshop = 0;
	if (($currCat == "asset")||($currCat == "shot"))
		{
		string $assetName = basename($currPath,"");
		$workshop = ($currPath + $wName + "/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($assetName + "_" + $wName + "_*."+$ext)`;
		$workshopFiles = sort($workshopFiles);
		$numWorkshops = `size($workshopFiles)`;
		if ($numWorkshops)
			$latestWorkshop = openPipelineGetVersionFromFile($workshopFiles[$numWorkshops-1]);
		string $suffix = openPipelinePad(($latestWorkshop+1),4);
		$destinationFile = ($workshop + $assetName + "_" + $wName + "_" + $suffix + "."+$ext);
	} 
	else if (($currCat == "component")||($currCat == "shotComponent"))
	{	
		string $componentName = basename($currPath,"");
		string $assetName = openPipelineGetFolderFromPath($currPath,2);
		$workshop = ($currPath + $wName + "/");
		$workshopFiles = `getFileList -folder $workshop -filespec ($assetName + "_" + $componentName + "_" + $wName + "_*."+$ext)`;
		$workshopFiles = sort($workshopFiles);
		$numWorkshops = `size($workshopFiles)`;
		if ($numWorkshops)
			$latestWorkshop = openPipelineGetVersionFromFile($workshopFiles[$numWorkshops-1]);
		string $suffix = openPipelinePad(($latestWorkshop+1),4);
		$destinationFile = ($workshop + $assetName + "_" + $componentName + "_" + $wName +"_" + 

$suffix + "."+$ext);
	}

	// save the current file to the master location
	file -rename $destinationFile;     
	string $type;
	if ($ext == "ma")
	    $type = "mayaAscii";
	else if ($ext == "mb")
	    $type = "mayaBinary";
	else
	{
	    $type = "mayaBinary";
	    warning ("Invalid file format ("+$ext+") specified: saving to Maya Binary");
	}   
	file -save -type $type;
}

//*** Saves a master for the currently open asset / component / shot / shot component
global proc openPipelineSaveMaster()
{
	string $ext = `optionVar -q "op_masterFormat"`;
	
	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currType = `optionVar -q "op_currOpenType"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	int $currVersion = `optionVar -q "op_currOpenVersion"`;
	
	string $masterFile;
	string $versions;
	string $versionFiles[];
	string $destinationFile;
	int $latestVersion = 0;
	if($currCat == "asset")
	{
		string $assetName = basename($currPath,"");
		$masterFile = ($currPath + $assetName + "_asset." + $ext);
		$versions = ($currPath + "version/");
		$versionFiles = `getFileList -folder $versions`;
		$versionFiles = sort($versionFiles);
		int $numVersions = `size($versionFiles)`;
		if ($numVersions)
			$latestVersion = (openPipelineGetVersionFromFile($versionFiles[$numVersions-1]));
		string $suffix = openPipelinePad(($latestVersion+1),4);
		$destinationFile = ($versions + $assetName + "_version_" + $suffix + "." + $ext);	
	} 
	else if (($currCat == "component")||($currCat == "shotComponent"))
	{	
		string $componentName = openPipelineGetFolderFromPath($currPath,0);
		string $assetName = openPipelineGetFolderFromPath($currPath,2);
		$masterFile = ($currPath + $assetName + "_" + $componentName + "." + $ext);
		$versions = ($currPath + "version/");
		$versionFiles = `getFileList -folder $versions`;
		$versionFiles = sort($versionFiles);
		int $numVersions = `size($versionFiles)`;
		if ($numVersions)
			$latestVersion = (openPipelineGetVersionFromFile($versionFiles[$numVersions-1]));
		string $suffix = openPipelinePad(($latestVersion+1),4);
		$destinationFile = ($versions + $assetName + "_" + $componentName + "_version_" + $suffix + "." + $ext);		
	}
	else if($currCat == "shot")
	{
		string $shotName = basename($currPath,"");
		$masterFile = ($currPath + $shotName + "_shot." + $ext);
		$versions = ($currPath + "version/");
		$versionFiles = `getFileList -folder $versions`;
		$versionFiles = sort($versionFiles);
		int $numVersions = `size($versionFiles)`;
		if ($numVersions)
			$latestVersion = (openPipelineGetVersionFromFile($versionFiles[$numVersions-1]));
		string $suffix = openPipelinePad(($latestVersion+1),4);
		$destinationFile = ($versions + $shotName + "_version_" + $suffix + "." + $ext);	
	} 
	sysFile -rename $destinationFile $masterFile;

	openPipelineCleanMaster;
		
	// save the current file to the master location
	file -rename $masterFile;
	
	string $type;
	if ($ext == "ma")
	    $type = "mayaAscii";
	else if ($ext == "mb")
	    $type = "mayaBinary";
	else
	{
	    $type = "mayaBinary";
	    warning ("Invalid file format ("+$ext+")specified: saving to Maya Binary");
	}   
	file -save -type $type;
}


global proc openPipelineCleanMaster()
{
	// flatten the references to create a publishable master file
	int $flatten = `checkBox -q -v masterImportReferencesBox`;
	if($flatten)
	{
		openPipelineImportRefs;
	}

	// delete layers from the publishable master file
	int $deleteLayers = `checkBox -q -v masterDeleteLayersBox`;
	if($deleteLayers)
	{
		string $layers[] = `ls -type displayLayer`;
		for($layer in $layers)
		{
			if($layer != "defaultLayer")
			{
				delete $layer;
			}
		}
	}
	
	string $customCommand = `textField -q -text op_masterCommandField`;
	if($customCommand != "")
	{
		print ("openPipeline: begin custom command " + $customCommand + "\n");
		evalEcho $customCommand;
		print ("openPipeline: end custom command " + $customCommand + "\n");
	}
}

global proc openPipelineImportRefs()
{
	// list all references in shot
	string $referencedFiles[] = `file -q -reference`;
	string $eachReference;
	
	if (`size($referencedFiles)` <= 0)
	{
		warning ("openPipeline: no references to import\n");
	}
	
	for ($eachReference in $referencedFiles)
	{
		file -importReference $eachReference;
		print ("openPipeline: " + $eachReference + " imported into current shot file\n");
	}
}

//*** move files and folders to the archive
//          $category - 'type', 'asset', 'component', 'sequence', 'shot', 'shotComponent'
global proc openPipelineRemoveFolder(string $category)
{

	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	
	int $currCheckOffset=-1;
	int $checkExtent=1;

	string $deletePath = (`optionVar -q "op_currProjectPath"`+"deleted/");
	string $paths[];
	string $destinationPrefix;
	string $destinationFolderName;
	string $confirmText = "";
	string $refreshCmd;
	
	if ($category == "type")
	{
		$confirmText = "Are you sure you want to remove the selected Asset Type(s)?\n(all files and folders will be moved to the 'deleted' folder)";
		$paths = openPipelineGetSelectedAssetTypes();
		$refreshCmd = "openPipelineUpdateAssetTypeList";
		if ($currCat=="asset")
			$currCheckOffset=1;
		else
			$currCheckOffset=3;
	}
	else if ($category == "asset")
	{
		$checkExtent=2;
		$confirmText = "Are you sure you want to remove the selected Asset?\n(all corresponding files, folders and archives will be moved to the 'deleted' folder)";
		$paths[0] = openPipelineGetSelectedAsset();
		$refreshCmd = "openPipelineAssetTypeSelected 1";
		if ($currCat=="asset")
			$currCheckOffset=0;
		else
			$currCheckOffset=2;
	}
	else if ($category == "component")
	{
		$checkExtent=4;
		$confirmText = "Are you sure you want to remove the selected Component?\n(all corresponding files, folders and archives will be moved to the 'deleted' folder)";
		$paths[0] = openPipelineGetSelectedComponent();
		$refreshCmd = "openPipelineAssetSelected 1";
		if ($currCat=="component")
			$currCheckOffset=0;
	}
	else if ($category == "shot")
	{
		$confirmText = "Are you sure you want to remove the selected Shot?\n(all corresponding files, folders and archives will be moved to the 'deleted' folder)";
		$paths[0] = openPipelineGetSelectedShot();
		$refreshCmd = "openPipelineUpdateShotList 1";
		if ($currCat=="shot")
			$currCheckOffset=0;
	}
	else if ($category == "sequence")
	{
		$confirmText = "Are you sure you want to remove the selected Sequence?\n(all corresponding files, folders and archives will be moved to the 'deleted' folder)";
		$paths[0] = openPipelineGetSelectedSequence();
		$refreshCmd = "openPipelineUpdateSequenceList";
		if ($currCat=="sequence")
			$currCheckOffset=0;
	}
	else if ($category == "shotComponent")
	{
		$checkExtent=4;
		$confirmText = "Are you sure you want to remove the selected Shot Component?\n(all corresponding files, folders and archives will be moved to the 'deleted' folder)";
		$paths[0] = openPipelineGetSelectedShotComponent();
		$refreshCmd = "openPipelineShotSelected 1";
		if ($currCat=="component")
			$currCheckOffset=0;
	}	
	if (`confirmDialog -t "Remove Files" -m $confirmText -ma "center" -b "Yes" -b "No" -db "Yes" -cb "No"`=="Yes")
	{
		if (!`filetest -d $deletePath`)
			sysFile -makeDir $deletePath;
		
		int $i;
		string $destinationPath;
		for ($i=0; $i<size($paths);$i++)
		{
			if (($currCheckOffset>-1)&&($currPath!=""))
			{
				//check if the currently open asset, component or shot is being deleted
				int $isCurrent=1;
				int $k;
				for ($k=0;$k<$checkExtent;$k++)
				{
					string $one=openPipelineGetFolderFromPath($paths[$i],$k);
					string $two=openPipelineGetFolderFromPath($currPath,$k+$currCheckOffset);
					if ($one!=$two)
					{
						$isCurrent=0;
						$k=$checkExtent;
					}
				}
				if ($isCurrent)
				{
					if (`confirmDialog -t "Remove Files" -m "You are removing an asset, component or shot that is currently open. Continue?" -ma "center" -b "Yes" -b "No" -db "Yes" -cb "No"`=="Yes")
					{
						optionVar -sv "op_currOpenPath" "";
						optionVar -sv "op_currOpenType" "";
						optionVar -sv "op_currOpenCategory" "";
						optionVar -iv "op_currOpenVersion" 0;
						openPipelineUpdateCurrentlyOpen();
					}
					else
					{
						return;
					}
				}
			}
			
			if ($category == "type")
				$destinationFolderName = openPipelineGetFolderFromPath($paths[$i],0);
			else if ($category == "asset")
			{
				$destinationFolderName = openPipelineGetFolderFromPath($paths[$i],1)+"_"+openPipelineGetFolderFromPath($paths[$i],0);
			}
			else if ($category == "component")
			{
				$destinationFolderName = openPipelineGetFolderFromPath($paths[$i],3)+"_"+openPipelineGetFolderFromPath($paths[$i],2)+"_"+openPipelineGetFolderFromPath($paths[$i],0);
			}
			else if ($category == "shot")
			{
				$destinationFolderName = "shot_" + openPipelineGetFolderFromPath($paths[$i],0);
			}
			
			int $j = 0;
			while (`filetest -d ($deletePath+$destinationFolderName+"_deleted_"+$j)`)
			{
				$j++;
			}
			string $projectPath = `optionVar -q "op_currProjectPath"`;
			string $archivePath = `optionVar -q "op_archivePath"`;
			int $result1;
			int $result2=1;
			
			string $originalPath = $paths[$i];
			
			string $renamedPath = ($deletePath + $destinationFolderName + "_deleted_" + $j);
			
			//move folders to 'deleted' folder
			$result1 = `sysFile -rename $renamedPath $originalPath`;
			if (!$result1)
				{
					confirmDialog -t "openPipeline: Remove Error" -m ("Remove failed. Folder "+$originalPath+" could not be moved to the 'deleted' folder. \nA folder or file may be in use outside of Maya.") -b "Ok";
				}
			else
				{
					string $originalArchivedPath = substituteAllString($paths[$i], 

$projectPath, $archivePath);
					if (`filetest -d $originalArchivedPath`)
					{
						string $renamedPath2 = ($deletePath + $destinationFolderName 

+ "_archive_deleted_" + $j);
						$result2 = `sysFile -rename $renamedPath2 

$originalArchivedPath`;
						if (!$result2)
						{
							confirmDialog -t "openPipeline: Remove Error" -m ("Remove failed. Folder "+$originalArchivedPath+" could not be moved to the 'deleted' folder. \nA folder or file may be in use outside of Maya.") -b "Ok";
						}
					}
				}
			
		}
		eval($refreshCmd);
	}
}

//*** move files and folders to the archive
//          $category - 'asset', 'component' or 'shot'
//					$path - path of asset/component/shot
global proc openPipelineArchiveFolder(string $type, string $path)
{
	string $wName = `optionVar -q "op_workshopName"`;
	int $wAttempts = 0;
	int $wSuccesses = 0;
	int $vAttempts = 0;
	int $vSuccesses = 0;
	int $doWorkshops = `checkBox -q -v op_archiveWorkshopsCheckBox`;
	int $doVersions = `checkBox -q -v op_archiveVersionsCheckBox`;
	
	string $projectPath = `optionVar -q "op_currProjectPath"`;
	string $archivePath = `optionVar -q "op_archivePath"`;
	
	if ($doWorkshops)
	{
			int $keepWorkshops = `intField -q -v op_archiveField1`;
			string $workshopFiles[];
			$workshopFiles = openPipelineGetWorkshops($path);
			int $numWorkshops = size($workshopFiles);
			
			for ($i=0; $i<$numWorkshops-$keepWorkshops; $i++)
				{
					$wAttempts++;
					string $file = $workshopFiles[$i];
					string $newName = substituteAllString($file, $projectPath, 

$archivePath);
					if (!$i)
						{
							string $dirName = dirname($newName);
							if (!`filetest -d $dirName`)
								sysFile -md $dirName;
						}
					
					int $result = `sysFile -ren $newName $file`;
					if ($result)
						$wSuccesses++;
				}
	}
	
	if ($doVersions)
	{
		int $keepVersions = `intField -q -v op_archiveField2`;
		string $versionFiles[];
		$versionFiles = openPipelineGetVersions($path);
		int $numVersions = size($versionFiles);
			
			for ($i=0; $i<$numVersions-$keepVersions; $i++)
				{
					$vAttempts++;
					string $file = $versionFiles[$i];
					string $newName = substituteAllString($file, $projectPath, 

$archivePath);
					if (!$i)
						{
							string $dirName = dirname($newName);
							if (!`filetest -d $dirName`)
								sysFile -md $dirName;
						}
					int $result = `sysFile -ren $newName $file`;
					if ($result)
						$vSuccesses++;
				}
	}
	string $message = $wSuccesses+" / "+ $wAttempts +" "+ $wName+" files successfully moved to the archive.\n";
	$message = $message + " " + $vSuccesses+" / "+ $vAttempts + " version files successfully moved to the archive.\n";
	openPipelineRemoveSecondaryWindows();
	openPipelineUpdateCurrentlyOpen();
	confirmDialog -t "Archive Results" -m $message -button "OK" ;
	
}

//*** move files and folders back from the archive
//          $category - 'asset', 'component' or 'shot'
//					$path - path of asset/component/shot
global proc openPipelineRetrieveFolder(string $type, string $path)
{
	int $wAttempts = 0;
	int $wSuccesses = 0;
	int $vAttempts = 0;
	int $vSuccesses = 0;
	int $doWorkshops = `checkBox -q -v op_retrieveWorkshopsCheckBox`;
	int $doVersions = `checkBox -q -v op_retrieveVersionsCheckBox`;
	string $wName = `optionVar -q "op_workshopName"`;
	string $projectPath = `optionVar -q "op_currProjectPath"`;
	string $archivePath = `optionVar -q "op_archivePath"`;
	string $currPath = substituteAllString($path, $projectPath, $archivePath);
	if ($doWorkshops)
	{
			string $archivedWorkshopFiles[];
			$archivedWorkshopFiles = openPipelineGetWorkshops($currPath);
			for ($file in $archivedWorkshopFiles)
				{
					$wAttempts++;
					string $newName = substituteAllString($file, $archivePath, 

$projectPath);
					int $result = `sysFile -ren $newName $file`;
					if ($result)
						$wSuccesses++;
				}
	}
	if ($doVersions)
	{
			string $archivedVersionFiles[];
			$archivedVersionFiles = openPipelineGetVersions($currPath);
			for ($file in $archivedVersionFiles)
				{
					$vAttempts++;
					string $newName = substituteAllString($file, $archivePath, 

$projectPath);
					int $result = `sysFile -ren $newName $file`;
					if ($result)
						$vSuccesses++;
				}
	}
	string $message = $wSuccesses+" / "+ $wAttempts +" "+ $wName+" files successfully retrieved from the archive.\n";
	$message = $message + " " + $vSuccesses+" / "+ $vAttempts +" "+ " version files successfully retrieved from the archive.\n";
	openPipelineRemoveSecondaryWindows();
	openPipelineUpdateCurrentlyOpen();
	confirmDialog -t "Retrieve Results" -m $message -button "OK" ;
	
}